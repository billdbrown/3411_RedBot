
3411_RedBot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00000fc0  00001054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005e  008001b6  008001b6  0000110a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000110a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001168  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001302  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b70  00000000  00000000  00002592  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000122b  00000000  00000000  00003102  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00004330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001081e  00000000  00000000  00004678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a99  00000000  00000000  00014e96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0001592f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004474  00000000  00000000  000159e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	12 c3       	rjmp	.+1572   	; 0x642 <__vector_7>
  1e:	00 00       	nop
  20:	35 c3       	rjmp	.+1642   	; 0x68c <__vector_8>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	aa c2       	rjmp	.+1364   	; 0x58e <__vector_14>
  3a:	00 00       	nop
  3c:	cd c2       	rjmp	.+1434   	; 0x5d8 <__vector_15>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3b       	cpi	r26, 0xB6	; 182
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 eb       	ldi	r26, 0xB6	; 182
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	1d d3       	rcall	.+1594   	; 0x6d6 <main>
  9c:	8f c7       	rjmp	.+3870   	; 0xfbc <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
  a0:	87 e6       	ldi	r24, 0x67	; 103
  a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  ac:	08 95       	ret

000000ae <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24

  if (c == '\a')
  b2:	87 30       	cpi	r24, 0x07	; 7
  b4:	61 f4       	brne	.+24     	; 0xce <uart_putchar+0x20>
    {
      fputs("*ring*\n", stderr);
  b6:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__iob+0x4>
  ba:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__iob+0x5>
  be:	47 e0       	ldi	r20, 0x07	; 7
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	4a d4       	rcall	.+2196   	; 0x960 <fwrite>
      return 0;
  cc:	0b c0       	rjmp	.+22     	; 0xe4 <uart_putchar+0x36>
    }

  if (c == '\n')
  ce:	8a 30       	cpi	r24, 0x0A	; 10
  d0:	11 f4       	brne	.+4      	; 0xd6 <uart_putchar+0x28>
    uart_putchar('\r', stream);
  d2:	8d e0       	ldi	r24, 0x0D	; 13
  d4:	ec df       	rcall	.-40     	; 0xae <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
  d6:	e0 ec       	ldi	r30, 0xC0	; 192
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	85 ff       	sbrs	r24, 5
  de:	fd cf       	rjmp	.-6      	; 0xda <uart_putchar+0x2c>
  UDR0 = c;
  e0:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
  ec:	6f 92       	push	r6
  ee:	7f 92       	push	r7
  f0:	8f 92       	push	r8
  f2:	9f 92       	push	r9
  f4:	af 92       	push	r10
  f6:	bf 92       	push	r11
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 108:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <rxp.1827>
 10c:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <rxp.1827+0x1>
 110:	23 2b       	or	r18, r19
 112:	09 f0       	breq	.+2      	; 0x116 <uart_getchar+0x2a>
 114:	cc c0       	rjmp	.+408    	; 0x2ae <uart_getchar+0x1c2>
 116:	8c 01       	movw	r16, r24
 118:	0f 2e       	mov	r0, r31
 11a:	f6 eb       	ldi	r31, 0xB6	; 182
 11c:	8f 2e       	mov	r8, r31
 11e:	f1 e0       	ldi	r31, 0x01	; 1
 120:	9f 2e       	mov	r9, r31
 122:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 124:	c0 ec       	ldi	r28, 0xC0	; 192
 126:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 128:	0f 2e       	mov	r0, r31
 12a:	f6 ec       	ldi	r31, 0xC6	; 198
 12c:	cf 2e       	mov	r12, r31
 12e:	d1 2c       	mov	r13, r1
 130:	f0 2d       	mov	r31, r0
 132:	54 01       	movw	r10, r8
 134:	0f 2e       	mov	r0, r31
 136:	f5 eb       	ldi	r31, 0xB5	; 181
 138:	6f 2e       	mov	r6, r31
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	7f 2e       	mov	r7, r31
 13e:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 140:	88 81       	ld	r24, Y
 142:	88 23       	and	r24, r24
 144:	ec f7       	brge	.-6      	; 0x140 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 146:	88 81       	ld	r24, Y
 148:	84 fd       	sbrc	r24, 4
 14a:	c4 c0       	rjmp	.+392    	; 0x2d4 <uart_getchar+0x1e8>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 14c:	88 81       	ld	r24, Y
 14e:	83 fd       	sbrc	r24, 3
 150:	c4 c0       	rjmp	.+392    	; 0x2da <uart_getchar+0x1ee>
	  return _FDEV_ERR;
	c = UDR0;
 152:	f6 01       	movw	r30, r12
 154:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 156:	8d 30       	cpi	r24, 0x0D	; 13
 158:	11 f0       	breq	.+4      	; 0x15e <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 15a:	8a 30       	cpi	r24, 0x0A	; 10
 15c:	61 f4       	brne	.+24     	; 0x176 <uart_getchar+0x8a>
	  {
	    *cp = c;
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	f4 01       	movw	r30, r8
 162:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 164:	b8 01       	movw	r22, r16
 166:	a3 df       	rcall	.-186    	; 0xae <uart_putchar>
	    rxp = b;
 168:	86 eb       	ldi	r24, 0xB6	; 182
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <rxp.1827+0x1>
 170:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <rxp.1827>
	    break;
 174:	9c c0       	rjmp	.+312    	; 0x2ae <uart_getchar+0x1c2>
	  }
	else if (c == '\t')
 176:	89 30       	cpi	r24, 0x09	; 9
 178:	39 f0       	breq	.+14     	; 0x188 <uart_getchar+0x9c>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 17a:	90 ee       	ldi	r25, 0xE0	; 224
 17c:	98 0f       	add	r25, r24
 17e:	9f 35       	cpi	r25, 0x5F	; 95
 180:	20 f0       	brcs	.+8      	; 0x18a <uart_getchar+0x9e>
 182:	80 3a       	cpi	r24, 0xA0	; 160
 184:	a8 f0       	brcs	.+42     	; 0x1b0 <uart_getchar+0xc4>
 186:	01 c0       	rjmp	.+2      	; 0x18a <uart_getchar+0x9e>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 188:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 18a:	f5 e0       	ldi	r31, 0x05	; 5
 18c:	8f 16       	cp	r8, r31
 18e:	f2 e0       	ldi	r31, 0x02	; 2
 190:	9f 06       	cpc	r9, r31
 192:	21 f4       	brne	.+8      	; 0x19c <uart_getchar+0xb0>
	      uart_putchar('\a', stream);
 194:	b8 01       	movw	r22, r16
 196:	87 e0       	ldi	r24, 0x07	; 7
 198:	8a df       	rcall	.-236    	; 0xae <uart_putchar>
 19a:	d2 cf       	rjmp	.-92     	; 0x140 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 19c:	74 01       	movw	r14, r8
 19e:	9f ef       	ldi	r25, 0xFF	; 255
 1a0:	e9 1a       	sub	r14, r25
 1a2:	f9 0a       	sbc	r15, r25
 1a4:	f4 01       	movw	r30, r8
		uart_putchar(c, stream);
 1a6:	80 83       	st	Z, r24
 1a8:	b8 01       	movw	r22, r16
 1aa:	81 df       	rcall	.-254    	; 0xae <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 1ac:	47 01       	movw	r8, r14
 1ae:	c8 cf       	rjmp	.-112    	; 0x140 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 1b0:	82 31       	cpi	r24, 0x12	; 18
 1b2:	b9 f1       	breq	.+110    	; 0x222 <uart_getchar+0x136>
 1b4:	30 f4       	brcc	.+12     	; 0x1c2 <uart_getchar+0xd6>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	09 f4       	brne	.+2      	; 0x1bc <uart_getchar+0xd0>
 1ba:	92 c0       	rjmp	.+292    	; 0x2e0 <uart_getchar+0x1f4>
 1bc:	88 30       	cpi	r24, 0x08	; 8
 1be:	e9 f0       	breq	.+58     	; 0x1fa <uart_getchar+0x10e>
 1c0:	bf cf       	rjmp	.-130    	; 0x140 <uart_getchar+0x54>
 1c2:	87 31       	cpi	r24, 0x17	; 23
 1c4:	29 f0       	breq	.+10     	; 0x1d0 <uart_getchar+0xe4>
 1c6:	8f 37       	cpi	r24, 0x7F	; 127
 1c8:	c1 f0       	breq	.+48     	; 0x1fa <uart_getchar+0x10e>
 1ca:	85 31       	cpi	r24, 0x15	; 21
 1cc:	79 f0       	breq	.+30     	; 0x1ec <uart_getchar+0x100>
 1ce:	b8 cf       	rjmp	.-144    	; 0x140 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 1d0:	f6 eb       	ldi	r31, 0xB6	; 182
 1d2:	8f 16       	cp	r8, r31
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	9f 06       	cpc	r9, r31
 1d8:	09 f0       	breq	.+2      	; 0x1dc <uart_getchar+0xf0>
 1da:	08 f4       	brcc	.+2      	; 0x1de <uart_getchar+0xf2>
 1dc:	b1 cf       	rjmp	.-158    	; 0x140 <uart_getchar+0x54>
 1de:	f4 01       	movw	r30, r8
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	80 81       	ld	r24, Z
 1e4:	80 32       	cpi	r24, 0x20	; 32
 1e6:	09 f0       	breq	.+2      	; 0x1ea <uart_getchar+0xfe>
 1e8:	4a c0       	rjmp	.+148    	; 0x27e <uart_getchar+0x192>
 1ea:	aa cf       	rjmp	.-172    	; 0x140 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 1ec:	86 eb       	ldi	r24, 0xB6	; 182
 1ee:	88 16       	cp	r8, r24
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	98 06       	cpc	r9, r24
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <uart_getchar+0x10c>
 1f6:	70 f5       	brcc	.+92     	; 0x254 <uart_getchar+0x168>
 1f8:	a3 cf       	rjmp	.-186    	; 0x140 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 1fa:	96 eb       	ldi	r25, 0xB6	; 182
 1fc:	89 16       	cp	r8, r25
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	99 06       	cpc	r9, r25
 202:	09 f0       	breq	.+2      	; 0x206 <uart_getchar+0x11a>
 204:	08 f4       	brcc	.+2      	; 0x208 <uart_getchar+0x11c>
	      {
		uart_putchar('\b', stream);
 206:	9c cf       	rjmp	.-200    	; 0x140 <uart_getchar+0x54>
 208:	b8 01       	movw	r22, r16
 20a:	88 e0       	ldi	r24, 0x08	; 8
		uart_putchar(' ', stream);
 20c:	50 df       	rcall	.-352    	; 0xae <uart_putchar>
 20e:	b8 01       	movw	r22, r16
 210:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 212:	4d df       	rcall	.-358    	; 0xae <uart_putchar>
 214:	b8 01       	movw	r22, r16
 216:	88 e0       	ldi	r24, 0x08	; 8
 218:	4a df       	rcall	.-364    	; 0xae <uart_putchar>
		cp--;
 21a:	e1 e0       	ldi	r30, 0x01	; 1
 21c:	8e 1a       	sub	r8, r30
 21e:	91 08       	sbc	r9, r1
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 220:	8f cf       	rjmp	.-226    	; 0x140 <uart_getchar+0x54>
 222:	b8 01       	movw	r22, r16
 224:	8d e0       	ldi	r24, 0x0D	; 13
 226:	43 df       	rcall	.-378    	; 0xae <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 228:	f6 eb       	ldi	r31, 0xB6	; 182
 22a:	8f 16       	cp	r8, r31
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	9f 06       	cpc	r9, r31
 230:	09 f0       	breq	.+2      	; 0x234 <uart_getchar+0x148>
 232:	08 f4       	brcc	.+2      	; 0x236 <uart_getchar+0x14a>
 234:	85 cf       	rjmp	.-246    	; 0x140 <uart_getchar+0x54>
 236:	0f 2e       	mov	r0, r31
 238:	f6 eb       	ldi	r31, 0xB6	; 182
 23a:	ef 2e       	mov	r14, r31
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	ff 2e       	mov	r15, r31
	      uart_putchar(*cp2, stream);
 240:	f0 2d       	mov	r31, r0
 242:	b8 01       	movw	r22, r16
 244:	f7 01       	movw	r30, r14
 246:	81 91       	ld	r24, Z+
 248:	7f 01       	movw	r14, r30
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 24a:	31 df       	rcall	.-414    	; 0xae <uart_putchar>
 24c:	8e 14       	cp	r8, r14
 24e:	9f 04       	cpc	r9, r15
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 250:	c1 f7       	brne	.-16     	; 0x242 <uart_getchar+0x156>
 252:	76 cf       	rjmp	.-276    	; 0x140 <uart_getchar+0x54>
 254:	b8 01       	movw	r22, r16
		uart_putchar(' ', stream);
 256:	88 e0       	ldi	r24, 0x08	; 8
 258:	2a df       	rcall	.-428    	; 0xae <uart_putchar>
 25a:	b8 01       	movw	r22, r16
 25c:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 25e:	27 df       	rcall	.-434    	; 0xae <uart_putchar>
 260:	b8 01       	movw	r22, r16
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	24 df       	rcall	.-440    	; 0xae <uart_putchar>
		cp--;
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	8f 1a       	sub	r8, r31
 26a:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 26c:	86 eb       	ldi	r24, 0xB6	; 182
 26e:	88 16       	cp	r8, r24
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	98 06       	cpc	r9, r24
 274:	79 f7       	brne	.-34     	; 0x254 <uart_getchar+0x168>
 276:	f3 01       	movw	r30, r6
 278:	31 96       	adiw	r30, 0x01	; 1
 27a:	4f 01       	movw	r8, r30
 27c:	61 cf       	rjmp	.-318    	; 0x140 <uart_getchar+0x54>
 27e:	74 01       	movw	r14, r8
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 280:	f1 e0       	ldi	r31, 0x01	; 1
 282:	ef 1a       	sub	r14, r31
 284:	f1 08       	sbc	r15, r1
 286:	b8 01       	movw	r22, r16
		uart_putchar(' ', stream);
 288:	88 e0       	ldi	r24, 0x08	; 8
 28a:	11 df       	rcall	.-478    	; 0xae <uart_putchar>
 28c:	b8 01       	movw	r22, r16
 28e:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 290:	0e df       	rcall	.-484    	; 0xae <uart_putchar>
 292:	b8 01       	movw	r22, r16
 294:	88 e0       	ldi	r24, 0x08	; 8
 296:	0b df       	rcall	.-490    	; 0xae <uart_putchar>
		cp--;
 298:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 29a:	ae 14       	cp	r10, r14
 29c:	bf 04       	cpc	r11, r15
 29e:	09 f4       	brne	.+2      	; 0x2a2 <uart_getchar+0x1b6>
 2a0:	4f cf       	rjmp	.-354    	; 0x140 <uart_getchar+0x54>
 2a2:	f7 01       	movw	r30, r14
 2a4:	82 91       	ld	r24, -Z
 2a6:	7f 01       	movw	r14, r30
 2a8:	80 32       	cpi	r24, 0x20	; 32
 2aa:	69 f7       	brne	.-38     	; 0x286 <uart_getchar+0x19a>
 2ac:	49 cf       	rjmp	.-366    	; 0x140 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 2ae:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <rxp.1827>
 2b2:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <rxp.1827+0x1>
 2b6:	cf 01       	movw	r24, r30
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <rxp.1827+0x1>
 2be:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <rxp.1827>
 2c2:	80 81       	ld	r24, Z
  if (c == '\n')
 2c4:	8a 30       	cpi	r24, 0x0A	; 10
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <uart_getchar+0x1e4>
    rxp = 0;
 2c8:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <rxp.1827+0x1>
 2cc:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <rxp.1827>

  return c;
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <uart_getchar+0x1f8>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 2d4:	8e ef       	ldi	r24, 0xFE	; 254
 2d6:	9f ef       	ldi	r25, 0xFF	; 255
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <uart_getchar+0x1f8>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	9f ef       	ldi	r25, 0xFF	; 255
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <uart_getchar+0x1f8>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	df 90       	pop	r13
 2f2:	cf 90       	pop	r12
 2f4:	bf 90       	pop	r11
 2f6:	af 90       	pop	r10
 2f8:	9f 90       	pop	r9
 2fa:	8f 90       	pop	r8
 2fc:	7f 90       	pop	r7
 2fe:	6f 90       	pop	r6
 300:	08 95       	ret

00000302 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 302:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 304:	84 b1       	in	r24, 0x04	; 4
 306:	80 62       	ori	r24, 0x20	; 32
 308:	8f 77       	andi	r24, 0x7F	; 127
 30a:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 30c:	89 2f       	mov	r24, r25
 30e:	80 6a       	ori	r24, 0xA0	; 160
 310:	85 b9       	out	0x05, r24	; 5
 312:	08 95       	ret

00000314 <adc_init>:
	right_motor_en(DISABLED);
}

void adc_init(void)
{
	ADMUX |= (1<<REFS0);
 314:	ec e7       	ldi	r30, 0x7C	; 124
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	80 64       	ori	r24, 0x40	; 64
 31c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //Enable the ADC in Free-Running mode with a fadc = 125 kHz
 31e:	ea e7       	ldi	r30, 0x7A	; 122
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	87 6a       	ori	r24, 0xA7	; 167
 326:	80 83       	st	Z, r24
 328:	08 95       	ret

0000032a <adc_clear>:
}

void adc_clear(void)
{
	ADMUX &= ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0); //Clear ADC MUX
 32a:	ec e7       	ldi	r30, 0x7C	; 124
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	80 7f       	andi	r24, 0xF0	; 240
 332:	80 83       	st	Z, r24
 334:	08 95       	ret

00000336 <timer0_init>:
//		125kHz = 1 * OCRnA+1 / 16 MHz
//		OCRnA = 127
// Yields 125kHz frequency, 8us period
void timer0_init(void)
{
	TCCR0A |= (1<<WGM01) | (1<<WGM00);	// Fast PWM Mode
 336:	84 b5       	in	r24, 0x24	; 36
 338:	83 60       	ori	r24, 0x03	; 3
 33a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02) | (1<<CS01) | (1<<CS00);	// Fast PWM Mode, Prescaler of 64
 33c:	85 b5       	in	r24, 0x25	; 37
 33e:	8b 60       	ori	r24, 0x0B	; 11
 340:	85 bd       	out	0x25, r24	; 37
	OCR0A = 127;						// Derived from equation for 8us period
 342:	8f e7       	ldi	r24, 0x7F	; 127
 344:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1<<OCIE0A)|(1<<OCIE0B);	// Enable interrupts for both rising and falling edge
 346:	ee e6       	ldi	r30, 0x6E	; 110
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	86 60       	ori	r24, 0x06	; 6
 34e:	80 83       	st	Z, r24
	
	// Define Initial PWM
	int leftDuty = OCR0A;
 350:	67 b5       	in	r22, 0x27	; 39
	OCR0B = 0.5 * leftDuty;
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	14 d2       	rcall	.+1064   	; 0x782 <__floatsisf>
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	5f e3       	ldi	r21, 0x3F	; 63
 362:	73 d2       	rcall	.+1254   	; 0x84a <__mulsf3>
 364:	e0 d1       	rcall	.+960    	; 0x726 <__fixunssfsi>
 366:	68 bd       	out	0x28, r22	; 40
 368:	08 95       	ret

0000036a <timer2_init>:
}

void timer2_init(void)
{
	TCCR2A |= (1<<WGM21) | (1<<WGM20);	// Fast PWM Mode
 36a:	e0 eb       	ldi	r30, 0xB0	; 176
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	83 60       	ori	r24, 0x03	; 3
 372:	80 83       	st	Z, r24
	TCCR2B |= (1<<WGM22) | (1<<CS21) | (1<<CS20);	// Fast PWM Mode, Prescaler of 32
 374:	e1 eb       	ldi	r30, 0xB1	; 177
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	8b 60       	ori	r24, 0x0B	; 11
 37c:	80 83       	st	Z, r24
	OCR2A = 127;
 37e:	e3 eb       	ldi	r30, 0xB3	; 179
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	8f e7       	ldi	r24, 0x7F	; 127
 384:	80 83       	st	Z, r24
	
	TIMSK2 |= (1<<OCIE2A)|(1<<OCIE2B);	// Enable interrupts for both rising and falling edge
 386:	a0 e7       	ldi	r26, 0x70	; 112
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	8c 91       	ld	r24, X
 38c:	86 60       	ori	r24, 0x06	; 6
 38e:	8c 93       	st	X, r24
	
	// Define Initial PWM
	int rightDuty = 0.45 * OCR2A;
 390:	60 81       	ld	r22, Z
	OCR2B = rightDuty;
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	f4 d1       	rcall	.+1000   	; 0x782 <__floatsisf>
 39a:	26 e6       	ldi	r18, 0x66	; 102
 39c:	36 e6       	ldi	r19, 0x66	; 102
 39e:	46 ee       	ldi	r20, 0xE6	; 230
 3a0:	5e e3       	ldi	r21, 0x3E	; 62
 3a2:	53 d2       	rcall	.+1190   	; 0x84a <__mulsf3>
 3a4:	bb d1       	rcall	.+886    	; 0x71c <__fixsfsi>
 3a6:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 3aa:	08 95       	ret

000003ac <init_all>:
//0.15 left, 0 right is full speed, just about straight
//0.5 left, 0.45 right is half speed, just about straight

void init_all(void)
{
	board_init();
 3ac:	aa df       	rcall	.-172    	; 0x302 <board_init>
	adc_clear();
 3ae:	bd df       	rcall	.-134    	; 0x32a <adc_clear>
	adc_init();
 3b0:	b1 df       	rcall	.-158    	; 0x314 <adc_init>
	uart_init();
 3b2:	76 de       	rcall	.-788    	; 0xa0 <uart_init>
 3b4:	c0 df       	rcall	.-128    	; 0x336 <timer0_init>
	
	// Timers
	timer0_init();
 3b6:	d9 df       	rcall	.-78     	; 0x36a <timer2_init>
 3b8:	78 94       	sei
	timer2_init();
 3ba:	ee e0       	ldi	r30, 0x0E	; 14
 3bc:	f2 e0       	ldi	r31, 0x02	; 2

	sei();
 3be:	80 e0       	ldi	r24, 0x00	; 0
	stdout = stdin = stderr = &uart_str;
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	95 83       	std	Z+5, r25	; 0x05
 3c4:	84 83       	std	Z+4, r24	; 0x04
 3c6:	91 83       	std	Z+1, r25	; 0x01
 3c8:	80 83       	st	Z, r24
 3ca:	93 83       	std	Z+3, r25	; 0x03
 3cc:	82 83       	std	Z+2, r24	; 0x02
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	8a b9       	out	0x0a, r24	; 10
	
	DDRD = 0b11111111;
 3d2:	84 b9       	out	0x04, r24	; 4
 3d4:	86 e1       	ldi	r24, 0x16	; 22
	DDRB = 0b11111111;
 3d6:	91 e0       	ldi	r25, 0x01	; 1
	
	printf("Hello! \n\n");
 3d8:	08 c3       	rjmp	.+1552   	; 0x9ea <puts>
 3da:	08 95       	ret

000003dc <adc_conv>:
 3dc:	ea e7       	ldi	r30, 0x7A	; 122
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
}

int adc_conv(void)
{
	ADCSRA |= (1<<ADSC);									//start conversion
 3e2:	80 64       	ori	r24, 0x40	; 64
 3e4:	80 83       	st	Z, r24
	while(!(ADCSRA &(1<<ADSC)));							//wait for it to complete
 3e6:	80 81       	ld	r24, Z
 3e8:	86 ff       	sbrs	r24, 6
 3ea:	fd cf       	rjmp	.-6      	; 0x3e6 <adc_conv+0xa>
	uint16_t sample_val_int = ADC;							//store the sample in a variable
 3ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	

	return sample_val_int;									//return as an int
}
 3f4:	08 95       	ret

000003f6 <sensor_select>:
	
MUXes are set one state ahead, looking into why.
*/
void sensor_select(int sens_mot_sel)
{
	switch(sens_mot_sel)
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	91 05       	cpc	r25, r1
 3fa:	11 f1       	breq	.+68     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3fc:	82 30       	cpi	r24, 0x02	; 2
 3fe:	91 05       	cpc	r25, r1
 400:	09 f4       	brne	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	39 c0       	rjmp	.+114    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 404:	00 97       	sbiw	r24, 0x00	; 0
 406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	51 c0       	rjmp	.+162    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
	{
				
		case RIGHT_SENSOR:
			adc_clear();
 40a:	8f df       	rcall	.-226    	; 0x32a <adc_clear>
			ADMUX |= (1<<MUX1) | (1<<MUX0);				// Activates the Center MUX - Reason unknown
 40c:	ec e7       	ldi	r30, 0x7C	; 124
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	83 60       	ori	r24, 0x03	; 3
			right_sensor = adc_conv();
 414:	80 83       	st	Z, r24
 416:	e2 df       	rcall	.-60     	; 0x3dc <adc_conv>
 418:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <right_sensor+0x1>
 41c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <right_sensor>
			printf("Right sensor: %d \n", right_sensor);
 420:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <right_sensor>
 424:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <right_sensor+0x1>
 428:	9f 93       	push	r25
 42a:	8f 93       	push	r24
 42c:	8f e1       	ldi	r24, 0x1F	; 31
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	9f 93       	push	r25
 432:	8f 93       	push	r24
 434:	c7 d2       	rcall	.+1422   	; 0x9c4 <printf>
			break;
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
			
		case CENTER_SENSOR:
			adc_clear();
 43e:	08 95       	ret
 440:	74 df       	rcall	.-280    	; 0x32a <adc_clear>
			ADMUX |= (1<<MUX1);							// Activates the Left MUX - Reason unknown
 442:	ec e7       	ldi	r30, 0x7C	; 124
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	82 60       	ori	r24, 0x02	; 2
			center_sensor = adc_conv();
 44a:	80 83       	st	Z, r24
 44c:	c7 df       	rcall	.-114    	; 0x3dc <adc_conv>
 44e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <center_sensor+0x1>
 452:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <center_sensor>
			printf("Center sensor: %d \n", center_sensor);
 456:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <center_sensor>
 45a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <center_sensor+0x1>
 45e:	9f 93       	push	r25
 460:	8f 93       	push	r24
 462:	82 e3       	ldi	r24, 0x32	; 50
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	9f 93       	push	r25
 468:	8f 93       	push	r24
 46a:	ac d2       	rcall	.+1368   	; 0x9c4 <printf>
			break;
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	08 95       	ret
						
		case LEFT_SENSOR:
			adc_clear();
 476:	59 df       	rcall	.-334    	; 0x32a <adc_clear>
			ADMUX |= (1<<MUX2) | (1<<MUX1);				// Activates the Right MUX - Reason unknown
 478:	ec e7       	ldi	r30, 0x7C	; 124
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	86 60       	ori	r24, 0x06	; 6
 480:	80 83       	st	Z, r24
			left_sensor = adc_conv();
 482:	ac df       	rcall	.-168    	; 0x3dc <adc_conv>
 484:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <left_sensor+0x1>
 488:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <left_sensor>
 48c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <left_sensor>
			printf("Left sensor: %d \n", left_sensor);
 490:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <left_sensor+0x1>
 494:	9f 93       	push	r25
 496:	8f 93       	push	r24
 498:	86 e4       	ldi	r24, 0x46	; 70
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	9f 93       	push	r25
 49e:	8f 93       	push	r24
 4a0:	91 d2       	rcall	.+1314   	; 0x9c4 <printf>
 4a2:	0f 90       	pop	r0
			break;
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	08 95       	ret
		

		
		default:
			printf("ERROR: State ID %d not recognized \n", sens_mot_sel);
 4ac:	9f 93       	push	r25
 4ae:	8f 93       	push	r24
 4b0:	88 e5       	ldi	r24, 0x58	; 88
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	9f 93       	push	r25
 4b6:	8f 93       	push	r24
 4b8:	85 d2       	rcall	.+1290   	; 0x9c4 <printf>
 4ba:	0f 90       	pop	r0
			break;
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	08 95       	ret

000004c4 <determine_error>:
 4c4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <left_sensor>

// Determine the lines location relative to the sensors.
uint8_t determine_error(void)
{
	uint8_t errors[3];
	errors[LEFT_SENSOR] = (int) (left_sensor > LINE_THRESHOLD);
 4c8:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <left_sensor+0x1>
	errors[CENTER_SENSOR] = (int) (center_sensor > LINE_THRESHOLD);
 4cc:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <center_sensor>
 4d0:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <center_sensor+0x1>
	errors[RIGHT_SENSOR] = (int) (right_sensor > LINE_THRESHOLD);
 4d4:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <right_sensor>
 4d8:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <right_sensor+0x1>
	if (errors[LEFT_SENSOR] && errors[CENTER_SENSOR] && errors[RIGHT_SENSOR])	// [ 1 1 1 ]
 4dc:	85 3f       	cpi	r24, 0xF5	; 245
 4de:	91 40       	sbci	r25, 0x01	; 1
 4e0:	68 f0       	brcs	.+26     	; 0x4fc <determine_error+0x38>
 4e2:	25 3f       	cpi	r18, 0xF5	; 245
 4e4:	31 40       	sbci	r19, 0x01	; 1
 4e6:	28 f0       	brcs	.+10     	; 0x4f2 <determine_error+0x2e>
 4e8:	45 3f       	cpi	r20, 0xF5	; 245
 4ea:	51 40       	sbci	r21, 0x01	; 1
 4ec:	a8 f4       	brcc	.+42     	; 0x518 <determine_error+0x54>
		return ERROR_LEFT_CENTER_RIGHT;
	if (errors[LEFT_SENSOR] && errors[CENTER_SENSOR])							// [ 1 1 0 ]
		return ERROR_LEFT_CENTER;
 4ee:	86 e0       	ldi	r24, 0x06	; 6
 4f0:	08 95       	ret
	if (errors[LEFT_SENSOR] && errors[RIGHT_SENSOR])							// [ 1 0 1 ]
 4f2:	45 3f       	cpi	r20, 0xF5	; 245
 4f4:	51 40       	sbci	r21, 0x01	; 1
 4f6:	90 f4       	brcc	.+36     	; 0x51c <determine_error+0x58>
		return ERROR_LEFT_RIGHT;
	if (errors[LEFT_SENSOR])													// [ 1 0 0 ]
		return ERROR_LEFT;
 4f8:	84 e0       	ldi	r24, 0x04	; 4
 4fa:	08 95       	ret
	if (errors[CENTER_SENSOR] && errors[RIGHT_SENSOR])							// [ 0 1 1 ]
 4fc:	25 3f       	cpi	r18, 0xF5	; 245
 4fe:	31 40       	sbci	r19, 0x01	; 1
 500:	28 f0       	brcs	.+10     	; 0x50c <determine_error+0x48>
 502:	45 3f       	cpi	r20, 0xF5	; 245
 504:	51 40       	sbci	r21, 0x01	; 1
 506:	60 f4       	brcc	.+24     	; 0x520 <determine_error+0x5c>
		return ERROR_CENTER_RIGHT;
	if (errors[CENTER_SENSOR])													// [ 0 1 0 ]
		return ERROR_CENTER;
 508:	82 e0       	ldi	r24, 0x02	; 2
 50a:	08 95       	ret
	uint8_t errors[3];
	errors[LEFT_SENSOR] = (int) (left_sensor > LINE_THRESHOLD);
	errors[CENTER_SENSOR] = (int) (center_sensor > LINE_THRESHOLD);
	errors[RIGHT_SENSOR] = (int) (right_sensor > LINE_THRESHOLD);
	if (errors[LEFT_SENSOR] && errors[CENTER_SENSOR] && errors[RIGHT_SENSOR])	// [ 1 1 1 ]
		return ERROR_LEFT_CENTER_RIGHT;
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	45 3f       	cpi	r20, 0xF5	; 245
 510:	51 40       	sbci	r21, 0x01	; 1
 512:	38 f4       	brcc	.+14     	; 0x522 <determine_error+0x5e>
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	08 95       	ret
 518:	87 e0       	ldi	r24, 0x07	; 7
 51a:	08 95       	ret
	if (errors[LEFT_SENSOR] && errors[CENTER_SENSOR])							// [ 1 1 0 ]
		return ERROR_LEFT_CENTER;
	if (errors[LEFT_SENSOR] && errors[RIGHT_SENSOR])							// [ 1 0 1 ]
		return ERROR_LEFT_RIGHT;
 51c:	85 e0       	ldi	r24, 0x05	; 5
 51e:	08 95       	ret
	if (errors[LEFT_SENSOR])													// [ 1 0 0 ]
		return ERROR_LEFT;
	if (errors[CENTER_SENSOR] && errors[RIGHT_SENSOR])							// [ 0 1 1 ]
		return ERROR_CENTER_RIGHT;
 520:	83 e0       	ldi	r24, 0x03	; 3
	if (errors[CENTER_SENSOR])													// [ 0 1 0 ]
		return ERROR_CENTER;
	if (errors[RIGHT_SENSOR])													// [ 0 0 1 ]
		return ERROR_RIGHT;
	return ERROR_NONE;															// [ 0 0 0 ]
}
 522:	08 95       	ret

00000524 <motor_mode_select>:
-----------------------------
Determines the operating mode for the motor.
*/
void motor_mode_select(int mode_select)
{
	switch(mode_select)
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	91 05       	cpc	r25, r1
 528:	71 f0       	breq	.+28     	; 0x546 <motor_mode_select+0x22>
 52a:	1c f4       	brge	.+6      	; 0x532 <motor_mode_select+0xe>
 52c:	00 97       	sbiw	r24, 0x00	; 0
 52e:	41 f0       	breq	.+16     	; 0x540 <motor_mode_select+0x1c>
 530:	13 c0       	rjmp	.+38     	; 0x558 <motor_mode_select+0x34>
 532:	82 30       	cpi	r24, 0x02	; 2
 534:	91 05       	cpc	r25, r1
 536:	51 f0       	breq	.+20     	; 0x54c <motor_mode_select+0x28>
 538:	83 30       	cpi	r24, 0x03	; 3
 53a:	91 05       	cpc	r25, r1
 53c:	51 f0       	breq	.+20     	; 0x552 <motor_mode_select+0x2e>
 53e:	0c c0       	rjmp	.+24     	; 0x558 <motor_mode_select+0x34>
	{
		case MODE_FORWARD:
			PORTD |= (1<<PORTD4);		// Left Motor	: CCW	: IN1 L IN2 H
 540:	5c 9a       	sbi	0x0b, 4	; 11
			PORTD |= (1<<PORTD7);		// Right Motor  : CW	: IN1 H IN2 L
 542:	5f 9a       	sbi	0x0b, 7	; 11
			break;
 544:	08 95       	ret
		case MODE_CW:
			PORTD |= (1<<PORTD4);		// Left Motor	: CCW	: IN1 L IN2 H
 546:	5c 9a       	sbi	0x0b, 4	; 11
			PORTB |= (1<<PORTB0);		// Right Motor	: CCW	: IN1 L	IN2 H
 548:	28 9a       	sbi	0x05, 0	; 5
			break;
 54a:	08 95       	ret
		case MODE_BACKWARD:
			PORTD |= (1<<PORTD2);		// Left Motor	: CW	: IN1 H IN2 L
 54c:	5a 9a       	sbi	0x0b, 2	; 11
			PORTB |= (1<<PORTB0);		// Right Motor	: CCW	: IN1 L	IN2 H			
 54e:	28 9a       	sbi	0x05, 0	; 5
			break;
 550:	08 95       	ret
		case MODE_CCW:
			PORTD |= (1<<PORTD2);		// Left Motor	: CW	: IN1 H	IN2 L
 552:	5a 9a       	sbi	0x0b, 2	; 11
			PORTD |= (1<<PORTD7);		// Right Motor	: CW	: IN1 H IN2 L
 554:	5f 9a       	sbi	0x0b, 7	; 11
			break;
 556:	08 95       	ret
		default:
			printf("ERROR: Invalid Motor Mode %d. How did you do this.\n", mode_select);
 558:	9f 93       	push	r25
 55a:	8f 93       	push	r24
 55c:	8c e7       	ldi	r24, 0x7C	; 124
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	9f 93       	push	r25
 562:	8f 93       	push	r24
 564:	2f d2       	rcall	.+1118   	; 0x9c4 <printf>
			break;
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	08 95       	ret

00000570 <left_motor_en>:
	}
}

void left_motor_en(int en) 
{ 
	PORTD = (PORTD & ~(1<<PORTD5)) | ((1 & en)<<PORTD5);
 570:	2b b1       	in	r18, 0x0b	; 11
 572:	81 70       	andi	r24, 0x01	; 1
 574:	99 27       	eor	r25, r25
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	82 95       	swap	r24
 57c:	92 95       	swap	r25
 57e:	90 7f       	andi	r25, 0xF0	; 240
 580:	98 27       	eor	r25, r24
 582:	80 7f       	andi	r24, 0xF0	; 240
 584:	98 27       	eor	r25, r24
 586:	2f 7d       	andi	r18, 0xDF	; 223
 588:	82 2b       	or	r24, r18
 58a:	8b b9       	out	0x0b, r24	; 11
 58c:	08 95       	ret

0000058e <__vector_14>:

/* 
Interrupt Service Routines
*/
ISR(TIMER0_COMPA_vect)
{
 58e:	1f 92       	push	r1
 590:	0f 92       	push	r0
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	0f 92       	push	r0
 596:	11 24       	eor	r1, r1
 598:	2f 93       	push	r18
 59a:	3f 93       	push	r19
 59c:	4f 93       	push	r20
 59e:	5f 93       	push	r21
 5a0:	6f 93       	push	r22
 5a2:	7f 93       	push	r23
 5a4:	8f 93       	push	r24
 5a6:	9f 93       	push	r25
 5a8:	af 93       	push	r26
 5aa:	bf 93       	push	r27
 5ac:	ef 93       	push	r30
 5ae:	ff 93       	push	r31
	left_motor_en(ENABLED);
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	dd df       	rcall	.-70     	; 0x570 <left_motor_en>
}
 5b6:	ff 91       	pop	r31
 5b8:	ef 91       	pop	r30
 5ba:	bf 91       	pop	r27
 5bc:	af 91       	pop	r26
 5be:	9f 91       	pop	r25
 5c0:	8f 91       	pop	r24
 5c2:	7f 91       	pop	r23
 5c4:	6f 91       	pop	r22
 5c6:	5f 91       	pop	r21
 5c8:	4f 91       	pop	r20
 5ca:	3f 91       	pop	r19
 5cc:	2f 91       	pop	r18
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <__vector_15>:

ISR(TIMER0_COMPB_vect)
{
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	2f 93       	push	r18
 5e4:	3f 93       	push	r19
 5e6:	4f 93       	push	r20
 5e8:	5f 93       	push	r21
 5ea:	6f 93       	push	r22
 5ec:	7f 93       	push	r23
 5ee:	8f 93       	push	r24
 5f0:	9f 93       	push	r25
 5f2:	af 93       	push	r26
 5f4:	bf 93       	push	r27
 5f6:	ef 93       	push	r30
 5f8:	ff 93       	push	r31
	left_motor_en(DISABLED);
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	b8 df       	rcall	.-144    	; 0x570 <left_motor_en>
}
 600:	ff 91       	pop	r31
 602:	ef 91       	pop	r30
 604:	bf 91       	pop	r27
 606:	af 91       	pop	r26
 608:	9f 91       	pop	r25
 60a:	8f 91       	pop	r24
 60c:	7f 91       	pop	r23
 60e:	6f 91       	pop	r22
 610:	5f 91       	pop	r21
 612:	4f 91       	pop	r20
 614:	3f 91       	pop	r19
 616:	2f 91       	pop	r18
 618:	0f 90       	pop	r0
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	0f 90       	pop	r0
 61e:	1f 90       	pop	r1
 620:	18 95       	reti

00000622 <right_motor_en>:
{ 
	PORTD = (PORTD & ~(1<<PORTD5)) | ((1 & en)<<PORTD5);
}
void right_motor_en(int en)
{
	PORTD = (PORTD & ~(1<<PORTD6)) | ((1 & en)<<PORTD6);
 622:	2b b1       	in	r18, 0x0b	; 11
 624:	81 70       	andi	r24, 0x01	; 1
 626:	99 27       	eor	r25, r25
 628:	00 24       	eor	r0, r0
 62a:	96 95       	lsr	r25
 62c:	87 95       	ror	r24
 62e:	07 94       	ror	r0
 630:	96 95       	lsr	r25
 632:	87 95       	ror	r24
 634:	07 94       	ror	r0
 636:	98 2f       	mov	r25, r24
 638:	80 2d       	mov	r24, r0
 63a:	2f 7b       	andi	r18, 0xBF	; 191
 63c:	82 2b       	or	r24, r18
 63e:	8b b9       	out	0x0b, r24	; 11
 640:	08 95       	ret

00000642 <__vector_7>:
{
	left_motor_en(DISABLED);
}

ISR(TIMER2_COMPA_vect)
{
 642:	1f 92       	push	r1
 644:	0f 92       	push	r0
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	0f 92       	push	r0
 64a:	11 24       	eor	r1, r1
 64c:	2f 93       	push	r18
 64e:	3f 93       	push	r19
 650:	4f 93       	push	r20
 652:	5f 93       	push	r21
 654:	6f 93       	push	r22
 656:	7f 93       	push	r23
 658:	8f 93       	push	r24
 65a:	9f 93       	push	r25
 65c:	af 93       	push	r26
 65e:	bf 93       	push	r27
 660:	ef 93       	push	r30
 662:	ff 93       	push	r31
	right_motor_en(ENABLED);
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	dc df       	rcall	.-72     	; 0x622 <right_motor_en>
}
 66a:	ff 91       	pop	r31
 66c:	ef 91       	pop	r30
 66e:	bf 91       	pop	r27
 670:	af 91       	pop	r26
 672:	9f 91       	pop	r25
 674:	8f 91       	pop	r24
 676:	7f 91       	pop	r23
 678:	6f 91       	pop	r22
 67a:	5f 91       	pop	r21
 67c:	4f 91       	pop	r20
 67e:	3f 91       	pop	r19
 680:	2f 91       	pop	r18
 682:	0f 90       	pop	r0
 684:	0f be       	out	0x3f, r0	; 63
 686:	0f 90       	pop	r0
 688:	1f 90       	pop	r1
 68a:	18 95       	reti

0000068c <__vector_8>:

ISR(TIMER2_COMPB_vect)
{
 68c:	1f 92       	push	r1
 68e:	0f 92       	push	r0
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	0f 92       	push	r0
 694:	11 24       	eor	r1, r1
 696:	2f 93       	push	r18
 698:	3f 93       	push	r19
 69a:	4f 93       	push	r20
 69c:	5f 93       	push	r21
 69e:	6f 93       	push	r22
 6a0:	7f 93       	push	r23
 6a2:	8f 93       	push	r24
 6a4:	9f 93       	push	r25
 6a6:	af 93       	push	r26
 6a8:	bf 93       	push	r27
 6aa:	ef 93       	push	r30
 6ac:	ff 93       	push	r31
	right_motor_en(DISABLED);
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	b7 df       	rcall	.-146    	; 0x622 <right_motor_en>
}
 6b4:	ff 91       	pop	r31
 6b6:	ef 91       	pop	r30
 6b8:	bf 91       	pop	r27
 6ba:	af 91       	pop	r26
 6bc:	9f 91       	pop	r25
 6be:	8f 91       	pop	r24
 6c0:	7f 91       	pop	r23
 6c2:	6f 91       	pop	r22
 6c4:	5f 91       	pop	r21
 6c6:	4f 91       	pop	r20
 6c8:	3f 91       	pop	r19
 6ca:	2f 91       	pop	r18
 6cc:	0f 90       	pop	r0
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	0f 90       	pop	r0
 6d2:	1f 90       	pop	r1
 6d4:	18 95       	reti

000006d6 <main>:
	PORTD = (PORTD & ~(1<<PORTD6)) | ((1 & en)<<PORTD6);
}

int main (void)
{	
	init_all();
 6d6:	6a de       	rcall	.-812    	; 0x3ac <init_all>
	int sens_mot_sel = 0;
	motor_mode_select(MODE_FORWARD);
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	23 df       	rcall	.-442    	; 0x524 <motor_mode_select>
		sensor_select(sens_mot_sel);
		sens_mot_sel++;
		
		if(sens_mot_sel > 2)
		{
			printf("\n%d\n", determine_error());
 6de:	c0 eb       	ldi	r28, 0xB0	; 176
 6e0:	d1 e0       	ldi	r29, 0x01	; 1
	init_all();
	int sens_mot_sel = 0;
	motor_mode_select(MODE_FORWARD);
	while(1)
	{
		sensor_select(sens_mot_sel);
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	87 de       	rcall	.-754    	; 0x3f6 <sensor_select>
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	84 de       	rcall	.-760    	; 0x3f6 <sensor_select>
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	90 e0       	ldi	r25, 0x00	; 0
		sens_mot_sel++;
		
		if(sens_mot_sel > 2)
		{
			printf("\n%d\n", determine_error());
 6f2:	81 de       	rcall	.-766    	; 0x3f6 <sensor_select>
 6f4:	e7 de       	rcall	.-562    	; 0x4c4 <determine_error>
 6f6:	1f 92       	push	r1
 6f8:	8f 93       	push	r24
 6fa:	df 93       	push	r29
 6fc:	cf 93       	push	r28
 6fe:	62 d1       	rcall	.+708    	; 0x9c4 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 700:	9f ef       	ldi	r25, 0xFF	; 255
 702:	29 e6       	ldi	r18, 0x69	; 105
 704:	88 e1       	ldi	r24, 0x18	; 24
 706:	91 50       	subi	r25, 0x01	; 1
 708:	20 40       	sbci	r18, 0x00	; 0
 70a:	80 40       	sbci	r24, 0x00	; 0
 70c:	e1 f7       	brne	.-8      	; 0x706 <main+0x30>
 70e:	00 c0       	rjmp	.+0      	; 0x710 <main+0x3a>
 710:	00 00       	nop
 712:	0f 90       	pop	r0
 714:	0f 90       	pop	r0
 716:	0f 90       	pop	r0
 718:	0f 90       	pop	r0
 71a:	e3 cf       	rjmp	.-58     	; 0x6e2 <main+0xc>

0000071c <__fixsfsi>:
 71c:	04 d0       	rcall	.+8      	; 0x726 <__fixunssfsi>
 71e:	68 94       	set
 720:	b1 11       	cpse	r27, r1
 722:	8d c0       	rjmp	.+282    	; 0x83e <__fp_szero>
 724:	08 95       	ret

00000726 <__fixunssfsi>:
 726:	70 d0       	rcall	.+224    	; 0x808 <__fp_splitA>
 728:	88 f0       	brcs	.+34     	; 0x74c <__fixunssfsi+0x26>
 72a:	9f 57       	subi	r25, 0x7F	; 127
 72c:	90 f0       	brcs	.+36     	; 0x752 <__fixunssfsi+0x2c>
 72e:	b9 2f       	mov	r27, r25
 730:	99 27       	eor	r25, r25
 732:	b7 51       	subi	r27, 0x17	; 23
 734:	a0 f0       	brcs	.+40     	; 0x75e <__fixunssfsi+0x38>
 736:	d1 f0       	breq	.+52     	; 0x76c <__fixunssfsi+0x46>
 738:	66 0f       	add	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	88 1f       	adc	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	1a f0       	brmi	.+6      	; 0x748 <__fixunssfsi+0x22>
 742:	ba 95       	dec	r27
 744:	c9 f7       	brne	.-14     	; 0x738 <__fixunssfsi+0x12>
 746:	12 c0       	rjmp	.+36     	; 0x76c <__fixunssfsi+0x46>
 748:	b1 30       	cpi	r27, 0x01	; 1
 74a:	81 f0       	breq	.+32     	; 0x76c <__fixunssfsi+0x46>
 74c:	77 d0       	rcall	.+238    	; 0x83c <__fp_zero>
 74e:	b1 e0       	ldi	r27, 0x01	; 1
 750:	08 95       	ret
 752:	74 c0       	rjmp	.+232    	; 0x83c <__fp_zero>
 754:	67 2f       	mov	r22, r23
 756:	78 2f       	mov	r23, r24
 758:	88 27       	eor	r24, r24
 75a:	b8 5f       	subi	r27, 0xF8	; 248
 75c:	39 f0       	breq	.+14     	; 0x76c <__fixunssfsi+0x46>
 75e:	b9 3f       	cpi	r27, 0xF9	; 249
 760:	cc f3       	brlt	.-14     	; 0x754 <__fixunssfsi+0x2e>
 762:	86 95       	lsr	r24
 764:	77 95       	ror	r23
 766:	67 95       	ror	r22
 768:	b3 95       	inc	r27
 76a:	d9 f7       	brne	.-10     	; 0x762 <__fixunssfsi+0x3c>
 76c:	3e f4       	brtc	.+14     	; 0x77c <__fixunssfsi+0x56>
 76e:	90 95       	com	r25
 770:	80 95       	com	r24
 772:	70 95       	com	r23
 774:	61 95       	neg	r22
 776:	7f 4f       	sbci	r23, 0xFF	; 255
 778:	8f 4f       	sbci	r24, 0xFF	; 255
 77a:	9f 4f       	sbci	r25, 0xFF	; 255
 77c:	08 95       	ret

0000077e <__floatunsisf>:
 77e:	e8 94       	clt
 780:	09 c0       	rjmp	.+18     	; 0x794 <__floatsisf+0x12>

00000782 <__floatsisf>:
 782:	97 fb       	bst	r25, 7
 784:	3e f4       	brtc	.+14     	; 0x794 <__floatsisf+0x12>
 786:	90 95       	com	r25
 788:	80 95       	com	r24
 78a:	70 95       	com	r23
 78c:	61 95       	neg	r22
 78e:	7f 4f       	sbci	r23, 0xFF	; 255
 790:	8f 4f       	sbci	r24, 0xFF	; 255
 792:	9f 4f       	sbci	r25, 0xFF	; 255
 794:	99 23       	and	r25, r25
 796:	a9 f0       	breq	.+42     	; 0x7c2 <__floatsisf+0x40>
 798:	f9 2f       	mov	r31, r25
 79a:	96 e9       	ldi	r25, 0x96	; 150
 79c:	bb 27       	eor	r27, r27
 79e:	93 95       	inc	r25
 7a0:	f6 95       	lsr	r31
 7a2:	87 95       	ror	r24
 7a4:	77 95       	ror	r23
 7a6:	67 95       	ror	r22
 7a8:	b7 95       	ror	r27
 7aa:	f1 11       	cpse	r31, r1
 7ac:	f8 cf       	rjmp	.-16     	; 0x79e <__floatsisf+0x1c>
 7ae:	fa f4       	brpl	.+62     	; 0x7ee <__floatsisf+0x6c>
 7b0:	bb 0f       	add	r27, r27
 7b2:	11 f4       	brne	.+4      	; 0x7b8 <__floatsisf+0x36>
 7b4:	60 ff       	sbrs	r22, 0
 7b6:	1b c0       	rjmp	.+54     	; 0x7ee <__floatsisf+0x6c>
 7b8:	6f 5f       	subi	r22, 0xFF	; 255
 7ba:	7f 4f       	sbci	r23, 0xFF	; 255
 7bc:	8f 4f       	sbci	r24, 0xFF	; 255
 7be:	9f 4f       	sbci	r25, 0xFF	; 255
 7c0:	16 c0       	rjmp	.+44     	; 0x7ee <__floatsisf+0x6c>
 7c2:	88 23       	and	r24, r24
 7c4:	11 f0       	breq	.+4      	; 0x7ca <__floatsisf+0x48>
 7c6:	96 e9       	ldi	r25, 0x96	; 150
 7c8:	11 c0       	rjmp	.+34     	; 0x7ec <__floatsisf+0x6a>
 7ca:	77 23       	and	r23, r23
 7cc:	21 f0       	breq	.+8      	; 0x7d6 <__floatsisf+0x54>
 7ce:	9e e8       	ldi	r25, 0x8E	; 142
 7d0:	87 2f       	mov	r24, r23
 7d2:	76 2f       	mov	r23, r22
 7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <__floatsisf+0x5e>
 7d6:	66 23       	and	r22, r22
 7d8:	71 f0       	breq	.+28     	; 0x7f6 <__floatsisf+0x74>
 7da:	96 e8       	ldi	r25, 0x86	; 134
 7dc:	86 2f       	mov	r24, r22
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	2a f0       	brmi	.+10     	; 0x7ee <__floatsisf+0x6c>
 7e4:	9a 95       	dec	r25
 7e6:	66 0f       	add	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	da f7       	brpl	.-10     	; 0x7e4 <__floatsisf+0x62>
 7ee:	88 0f       	add	r24, r24
 7f0:	96 95       	lsr	r25
 7f2:	87 95       	ror	r24
 7f4:	97 f9       	bld	r25, 7
 7f6:	08 95       	ret

000007f8 <__fp_split3>:
 7f8:	57 fd       	sbrc	r21, 7
 7fa:	90 58       	subi	r25, 0x80	; 128
 7fc:	44 0f       	add	r20, r20
 7fe:	55 1f       	adc	r21, r21
 800:	59 f0       	breq	.+22     	; 0x818 <__fp_splitA+0x10>
 802:	5f 3f       	cpi	r21, 0xFF	; 255
 804:	71 f0       	breq	.+28     	; 0x822 <__fp_splitA+0x1a>
 806:	47 95       	ror	r20

00000808 <__fp_splitA>:
 808:	88 0f       	add	r24, r24
 80a:	97 fb       	bst	r25, 7
 80c:	99 1f       	adc	r25, r25
 80e:	61 f0       	breq	.+24     	; 0x828 <__fp_splitA+0x20>
 810:	9f 3f       	cpi	r25, 0xFF	; 255
 812:	79 f0       	breq	.+30     	; 0x832 <__fp_splitA+0x2a>
 814:	87 95       	ror	r24
 816:	08 95       	ret
 818:	12 16       	cp	r1, r18
 81a:	13 06       	cpc	r1, r19
 81c:	14 06       	cpc	r1, r20
 81e:	55 1f       	adc	r21, r21
 820:	f2 cf       	rjmp	.-28     	; 0x806 <__fp_split3+0xe>
 822:	46 95       	lsr	r20
 824:	f1 df       	rcall	.-30     	; 0x808 <__fp_splitA>
 826:	08 c0       	rjmp	.+16     	; 0x838 <__fp_splitA+0x30>
 828:	16 16       	cp	r1, r22
 82a:	17 06       	cpc	r1, r23
 82c:	18 06       	cpc	r1, r24
 82e:	99 1f       	adc	r25, r25
 830:	f1 cf       	rjmp	.-30     	; 0x814 <__fp_splitA+0xc>
 832:	86 95       	lsr	r24
 834:	71 05       	cpc	r23, r1
 836:	61 05       	cpc	r22, r1
 838:	08 94       	sec
 83a:	08 95       	ret

0000083c <__fp_zero>:
 83c:	e8 94       	clt

0000083e <__fp_szero>:
 83e:	bb 27       	eor	r27, r27
 840:	66 27       	eor	r22, r22
 842:	77 27       	eor	r23, r23
 844:	cb 01       	movw	r24, r22
 846:	97 f9       	bld	r25, 7
 848:	08 95       	ret

0000084a <__mulsf3>:
 84a:	0b d0       	rcall	.+22     	; 0x862 <__mulsf3x>
 84c:	78 c0       	rjmp	.+240    	; 0x93e <__fp_round>
 84e:	69 d0       	rcall	.+210    	; 0x922 <__fp_pscA>
 850:	28 f0       	brcs	.+10     	; 0x85c <__mulsf3+0x12>
 852:	6e d0       	rcall	.+220    	; 0x930 <__fp_pscB>
 854:	18 f0       	brcs	.+6      	; 0x85c <__mulsf3+0x12>
 856:	95 23       	and	r25, r21
 858:	09 f0       	breq	.+2      	; 0x85c <__mulsf3+0x12>
 85a:	5a c0       	rjmp	.+180    	; 0x910 <__fp_inf>
 85c:	5f c0       	rjmp	.+190    	; 0x91c <__fp_nan>
 85e:	11 24       	eor	r1, r1
 860:	ee cf       	rjmp	.-36     	; 0x83e <__fp_szero>

00000862 <__mulsf3x>:
 862:	ca df       	rcall	.-108    	; 0x7f8 <__fp_split3>
 864:	a0 f3       	brcs	.-24     	; 0x84e <__mulsf3+0x4>

00000866 <__mulsf3_pse>:
 866:	95 9f       	mul	r25, r21
 868:	d1 f3       	breq	.-12     	; 0x85e <__mulsf3+0x14>
 86a:	95 0f       	add	r25, r21
 86c:	50 e0       	ldi	r21, 0x00	; 0
 86e:	55 1f       	adc	r21, r21
 870:	62 9f       	mul	r22, r18
 872:	f0 01       	movw	r30, r0
 874:	72 9f       	mul	r23, r18
 876:	bb 27       	eor	r27, r27
 878:	f0 0d       	add	r31, r0
 87a:	b1 1d       	adc	r27, r1
 87c:	63 9f       	mul	r22, r19
 87e:	aa 27       	eor	r26, r26
 880:	f0 0d       	add	r31, r0
 882:	b1 1d       	adc	r27, r1
 884:	aa 1f       	adc	r26, r26
 886:	64 9f       	mul	r22, r20
 888:	66 27       	eor	r22, r22
 88a:	b0 0d       	add	r27, r0
 88c:	a1 1d       	adc	r26, r1
 88e:	66 1f       	adc	r22, r22
 890:	82 9f       	mul	r24, r18
 892:	22 27       	eor	r18, r18
 894:	b0 0d       	add	r27, r0
 896:	a1 1d       	adc	r26, r1
 898:	62 1f       	adc	r22, r18
 89a:	73 9f       	mul	r23, r19
 89c:	b0 0d       	add	r27, r0
 89e:	a1 1d       	adc	r26, r1
 8a0:	62 1f       	adc	r22, r18
 8a2:	83 9f       	mul	r24, r19
 8a4:	a0 0d       	add	r26, r0
 8a6:	61 1d       	adc	r22, r1
 8a8:	22 1f       	adc	r18, r18
 8aa:	74 9f       	mul	r23, r20
 8ac:	33 27       	eor	r19, r19
 8ae:	a0 0d       	add	r26, r0
 8b0:	61 1d       	adc	r22, r1
 8b2:	23 1f       	adc	r18, r19
 8b4:	84 9f       	mul	r24, r20
 8b6:	60 0d       	add	r22, r0
 8b8:	21 1d       	adc	r18, r1
 8ba:	82 2f       	mov	r24, r18
 8bc:	76 2f       	mov	r23, r22
 8be:	6a 2f       	mov	r22, r26
 8c0:	11 24       	eor	r1, r1
 8c2:	9f 57       	subi	r25, 0x7F	; 127
 8c4:	50 40       	sbci	r21, 0x00	; 0
 8c6:	8a f0       	brmi	.+34     	; 0x8ea <__mulsf3_pse+0x84>
 8c8:	e1 f0       	breq	.+56     	; 0x902 <__stack+0x3>
 8ca:	88 23       	and	r24, r24
 8cc:	4a f0       	brmi	.+18     	; 0x8e0 <__mulsf3_pse+0x7a>
 8ce:	ee 0f       	add	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	bb 1f       	adc	r27, r27
 8d4:	66 1f       	adc	r22, r22
 8d6:	77 1f       	adc	r23, r23
 8d8:	88 1f       	adc	r24, r24
 8da:	91 50       	subi	r25, 0x01	; 1
 8dc:	50 40       	sbci	r21, 0x00	; 0
 8de:	a9 f7       	brne	.-22     	; 0x8ca <__mulsf3_pse+0x64>
 8e0:	9e 3f       	cpi	r25, 0xFE	; 254
 8e2:	51 05       	cpc	r21, r1
 8e4:	70 f0       	brcs	.+28     	; 0x902 <__stack+0x3>
 8e6:	14 c0       	rjmp	.+40     	; 0x910 <__fp_inf>
 8e8:	aa cf       	rjmp	.-172    	; 0x83e <__fp_szero>
 8ea:	5f 3f       	cpi	r21, 0xFF	; 255
 8ec:	ec f3       	brlt	.-6      	; 0x8e8 <__mulsf3_pse+0x82>
 8ee:	98 3e       	cpi	r25, 0xE8	; 232
 8f0:	dc f3       	brlt	.-10     	; 0x8e8 <__mulsf3_pse+0x82>
 8f2:	86 95       	lsr	r24
 8f4:	77 95       	ror	r23
 8f6:	67 95       	ror	r22
 8f8:	b7 95       	ror	r27
 8fa:	f7 95       	ror	r31
 8fc:	e7 95       	ror	r30
 8fe:	9f 5f       	subi	r25, 0xFF	; 255
 900:	c1 f7       	brne	.-16     	; 0x8f2 <__mulsf3_pse+0x8c>
 902:	fe 2b       	or	r31, r30
 904:	88 0f       	add	r24, r24
 906:	91 1d       	adc	r25, r1
 908:	96 95       	lsr	r25
 90a:	87 95       	ror	r24
 90c:	97 f9       	bld	r25, 7
 90e:	08 95       	ret

00000910 <__fp_inf>:
 910:	97 f9       	bld	r25, 7
 912:	9f 67       	ori	r25, 0x7F	; 127
 914:	80 e8       	ldi	r24, 0x80	; 128
 916:	70 e0       	ldi	r23, 0x00	; 0
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	08 95       	ret

0000091c <__fp_nan>:
 91c:	9f ef       	ldi	r25, 0xFF	; 255
 91e:	80 ec       	ldi	r24, 0xC0	; 192
 920:	08 95       	ret

00000922 <__fp_pscA>:
 922:	00 24       	eor	r0, r0
 924:	0a 94       	dec	r0
 926:	16 16       	cp	r1, r22
 928:	17 06       	cpc	r1, r23
 92a:	18 06       	cpc	r1, r24
 92c:	09 06       	cpc	r0, r25
 92e:	08 95       	ret

00000930 <__fp_pscB>:
 930:	00 24       	eor	r0, r0
 932:	0a 94       	dec	r0
 934:	12 16       	cp	r1, r18
 936:	13 06       	cpc	r1, r19
 938:	14 06       	cpc	r1, r20
 93a:	05 06       	cpc	r0, r21
 93c:	08 95       	ret

0000093e <__fp_round>:
 93e:	09 2e       	mov	r0, r25
 940:	03 94       	inc	r0
 942:	00 0c       	add	r0, r0
 944:	11 f4       	brne	.+4      	; 0x94a <__fp_round+0xc>
 946:	88 23       	and	r24, r24
 948:	52 f0       	brmi	.+20     	; 0x95e <__fp_round+0x20>
 94a:	bb 0f       	add	r27, r27
 94c:	40 f4       	brcc	.+16     	; 0x95e <__fp_round+0x20>
 94e:	bf 2b       	or	r27, r31
 950:	11 f4       	brne	.+4      	; 0x956 <__fp_round+0x18>
 952:	60 ff       	sbrs	r22, 0
 954:	04 c0       	rjmp	.+8      	; 0x95e <__fp_round+0x20>
 956:	6f 5f       	subi	r22, 0xFF	; 255
 958:	7f 4f       	sbci	r23, 0xFF	; 255
 95a:	8f 4f       	sbci	r24, 0xFF	; 255
 95c:	9f 4f       	sbci	r25, 0xFF	; 255
 95e:	08 95       	ret

00000960 <fwrite>:
 960:	a0 e0       	ldi	r26, 0x00	; 0
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	e5 eb       	ldi	r30, 0xB5	; 181
 966:	f4 e0       	ldi	r31, 0x04	; 4
 968:	f8 c2       	rjmp	.+1520   	; 0xf5a <__prologue_saves__+0xc>
 96a:	5b 01       	movw	r10, r22
 96c:	4a 01       	movw	r8, r20
 96e:	79 01       	movw	r14, r18
 970:	d9 01       	movw	r26, r18
 972:	13 96       	adiw	r26, 0x03	; 3
 974:	2c 91       	ld	r18, X
 976:	21 ff       	sbrs	r18, 1
 978:	1d c0       	rjmp	.+58     	; 0x9b4 <fwrite+0x54>
 97a:	c0 e0       	ldi	r28, 0x00	; 0
 97c:	d0 e0       	ldi	r29, 0x00	; 0
 97e:	c8 15       	cp	r28, r8
 980:	d9 05       	cpc	r29, r9
 982:	d9 f0       	breq	.+54     	; 0x9ba <fwrite+0x5a>
 984:	8c 01       	movw	r16, r24
 986:	6c 01       	movw	r12, r24
 988:	ca 0c       	add	r12, r10
 98a:	db 1c       	adc	r13, r11
 98c:	c8 01       	movw	r24, r16
 98e:	0c 15       	cp	r16, r12
 990:	1d 05       	cpc	r17, r13
 992:	71 f0       	breq	.+28     	; 0x9b0 <fwrite+0x50>
 994:	0f 5f       	subi	r16, 0xFF	; 255
 996:	1f 4f       	sbci	r17, 0xFF	; 255
 998:	d7 01       	movw	r26, r14
 99a:	18 96       	adiw	r26, 0x08	; 8
 99c:	ed 91       	ld	r30, X+
 99e:	fc 91       	ld	r31, X
 9a0:	19 97       	sbiw	r26, 0x09	; 9
 9a2:	b7 01       	movw	r22, r14
 9a4:	dc 01       	movw	r26, r24
 9a6:	8c 91       	ld	r24, X
 9a8:	09 95       	icall
 9aa:	89 2b       	or	r24, r25
 9ac:	79 f3       	breq	.-34     	; 0x98c <fwrite+0x2c>
 9ae:	05 c0       	rjmp	.+10     	; 0x9ba <fwrite+0x5a>
 9b0:	21 96       	adiw	r28, 0x01	; 1
 9b2:	e5 cf       	rjmp	.-54     	; 0x97e <fwrite+0x1e>
 9b4:	80 e0       	ldi	r24, 0x00	; 0
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	01 c0       	rjmp	.+2      	; 0x9bc <fwrite+0x5c>
 9ba:	ce 01       	movw	r24, r28
 9bc:	cd b7       	in	r28, 0x3d	; 61
 9be:	de b7       	in	r29, 0x3e	; 62
 9c0:	ec e0       	ldi	r30, 0x0C	; 12
 9c2:	e7 c2       	rjmp	.+1486   	; 0xf92 <__epilogue_restores__+0xc>

000009c4 <printf>:
 9c4:	a0 e0       	ldi	r26, 0x00	; 0
 9c6:	b0 e0       	ldi	r27, 0x00	; 0
 9c8:	e7 ee       	ldi	r30, 0xE7	; 231
 9ca:	f4 e0       	ldi	r31, 0x04	; 4
 9cc:	d0 c2       	rjmp	.+1440   	; 0xf6e <__prologue_saves__+0x20>
 9ce:	ae 01       	movw	r20, r28
 9d0:	4b 5f       	subi	r20, 0xFB	; 251
 9d2:	5f 4f       	sbci	r21, 0xFF	; 255
 9d4:	fa 01       	movw	r30, r20
 9d6:	61 91       	ld	r22, Z+
 9d8:	71 91       	ld	r23, Z+
 9da:	af 01       	movw	r20, r30
 9dc:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__iob+0x2>
 9e0:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__iob+0x3>
 9e4:	32 d0       	rcall	.+100    	; 0xa4a <vfprintf>
 9e6:	e2 e0       	ldi	r30, 0x02	; 2
 9e8:	de c2       	rjmp	.+1468   	; 0xfa6 <__epilogue_restores__+0x20>

000009ea <puts>:
 9ea:	0f 93       	push	r16
 9ec:	1f 93       	push	r17
 9ee:	cf 93       	push	r28
 9f0:	df 93       	push	r29
 9f2:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__iob+0x2>
 9f6:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__iob+0x3>
 9fa:	23 81       	ldd	r18, Z+3	; 0x03
 9fc:	21 ff       	sbrs	r18, 1
 9fe:	1b c0       	rjmp	.+54     	; 0xa36 <puts+0x4c>
 a00:	8c 01       	movw	r16, r24
 a02:	d0 e0       	ldi	r29, 0x00	; 0
 a04:	c0 e0       	ldi	r28, 0x00	; 0
 a06:	f8 01       	movw	r30, r16
 a08:	81 91       	ld	r24, Z+
 a0a:	8f 01       	movw	r16, r30
 a0c:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <__iob+0x2>
 a10:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <__iob+0x3>
 a14:	db 01       	movw	r26, r22
 a16:	18 96       	adiw	r26, 0x08	; 8
 a18:	ed 91       	ld	r30, X+
 a1a:	fc 91       	ld	r31, X
 a1c:	19 97       	sbiw	r26, 0x09	; 9
 a1e:	88 23       	and	r24, r24
 a20:	31 f0       	breq	.+12     	; 0xa2e <puts+0x44>
 a22:	09 95       	icall
 a24:	89 2b       	or	r24, r25
 a26:	79 f3       	breq	.-34     	; 0xa06 <puts+0x1c>
 a28:	df ef       	ldi	r29, 0xFF	; 255
 a2a:	cf ef       	ldi	r28, 0xFF	; 255
 a2c:	ec cf       	rjmp	.-40     	; 0xa06 <puts+0x1c>
 a2e:	8a e0       	ldi	r24, 0x0A	; 10
 a30:	09 95       	icall
 a32:	89 2b       	or	r24, r25
 a34:	19 f0       	breq	.+6      	; 0xa3c <puts+0x52>
 a36:	8f ef       	ldi	r24, 0xFF	; 255
 a38:	9f ef       	ldi	r25, 0xFF	; 255
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <puts+0x56>
 a3c:	8d 2f       	mov	r24, r29
 a3e:	9c 2f       	mov	r25, r28
 a40:	df 91       	pop	r29
 a42:	cf 91       	pop	r28
 a44:	1f 91       	pop	r17
 a46:	0f 91       	pop	r16
 a48:	08 95       	ret

00000a4a <vfprintf>:
 a4a:	ab e0       	ldi	r26, 0x0B	; 11
 a4c:	b0 e0       	ldi	r27, 0x00	; 0
 a4e:	ea e2       	ldi	r30, 0x2A	; 42
 a50:	f5 e0       	ldi	r31, 0x05	; 5
 a52:	7d c2       	rjmp	.+1274   	; 0xf4e <__prologue_saves__>
 a54:	6c 01       	movw	r12, r24
 a56:	7b 01       	movw	r14, r22
 a58:	8a 01       	movw	r16, r20
 a5a:	fc 01       	movw	r30, r24
 a5c:	17 82       	std	Z+7, r1	; 0x07
 a5e:	16 82       	std	Z+6, r1	; 0x06
 a60:	83 81       	ldd	r24, Z+3	; 0x03
 a62:	81 ff       	sbrs	r24, 1
 a64:	bf c1       	rjmp	.+894    	; 0xde4 <vfprintf+0x39a>
 a66:	ce 01       	movw	r24, r28
 a68:	01 96       	adiw	r24, 0x01	; 1
 a6a:	3c 01       	movw	r6, r24
 a6c:	f6 01       	movw	r30, r12
 a6e:	93 81       	ldd	r25, Z+3	; 0x03
 a70:	f7 01       	movw	r30, r14
 a72:	93 fd       	sbrc	r25, 3
 a74:	85 91       	lpm	r24, Z+
 a76:	93 ff       	sbrs	r25, 3
 a78:	81 91       	ld	r24, Z+
 a7a:	7f 01       	movw	r14, r30
 a7c:	88 23       	and	r24, r24
 a7e:	09 f4       	brne	.+2      	; 0xa82 <vfprintf+0x38>
 a80:	ad c1       	rjmp	.+858    	; 0xddc <vfprintf+0x392>
 a82:	85 32       	cpi	r24, 0x25	; 37
 a84:	39 f4       	brne	.+14     	; 0xa94 <vfprintf+0x4a>
 a86:	93 fd       	sbrc	r25, 3
 a88:	85 91       	lpm	r24, Z+
 a8a:	93 ff       	sbrs	r25, 3
 a8c:	81 91       	ld	r24, Z+
 a8e:	7f 01       	movw	r14, r30
 a90:	85 32       	cpi	r24, 0x25	; 37
 a92:	21 f4       	brne	.+8      	; 0xa9c <vfprintf+0x52>
 a94:	b6 01       	movw	r22, r12
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	c0 d1       	rcall	.+896    	; 0xe1a <fputc>
 a9a:	e8 cf       	rjmp	.-48     	; 0xa6c <vfprintf+0x22>
 a9c:	91 2c       	mov	r9, r1
 a9e:	21 2c       	mov	r2, r1
 aa0:	31 2c       	mov	r3, r1
 aa2:	ff e1       	ldi	r31, 0x1F	; 31
 aa4:	f3 15       	cp	r31, r3
 aa6:	d8 f0       	brcs	.+54     	; 0xade <vfprintf+0x94>
 aa8:	8b 32       	cpi	r24, 0x2B	; 43
 aaa:	79 f0       	breq	.+30     	; 0xaca <vfprintf+0x80>
 aac:	38 f4       	brcc	.+14     	; 0xabc <vfprintf+0x72>
 aae:	80 32       	cpi	r24, 0x20	; 32
 ab0:	79 f0       	breq	.+30     	; 0xad0 <vfprintf+0x86>
 ab2:	83 32       	cpi	r24, 0x23	; 35
 ab4:	a1 f4       	brne	.+40     	; 0xade <vfprintf+0x94>
 ab6:	23 2d       	mov	r18, r3
 ab8:	20 61       	ori	r18, 0x10	; 16
 aba:	1d c0       	rjmp	.+58     	; 0xaf6 <vfprintf+0xac>
 abc:	8d 32       	cpi	r24, 0x2D	; 45
 abe:	61 f0       	breq	.+24     	; 0xad8 <vfprintf+0x8e>
 ac0:	80 33       	cpi	r24, 0x30	; 48
 ac2:	69 f4       	brne	.+26     	; 0xade <vfprintf+0x94>
 ac4:	23 2d       	mov	r18, r3
 ac6:	21 60       	ori	r18, 0x01	; 1
 ac8:	16 c0       	rjmp	.+44     	; 0xaf6 <vfprintf+0xac>
 aca:	83 2d       	mov	r24, r3
 acc:	82 60       	ori	r24, 0x02	; 2
 ace:	38 2e       	mov	r3, r24
 ad0:	e3 2d       	mov	r30, r3
 ad2:	e4 60       	ori	r30, 0x04	; 4
 ad4:	3e 2e       	mov	r3, r30
 ad6:	2a c0       	rjmp	.+84     	; 0xb2c <vfprintf+0xe2>
 ad8:	f3 2d       	mov	r31, r3
 ada:	f8 60       	ori	r31, 0x08	; 8
 adc:	1d c0       	rjmp	.+58     	; 0xb18 <vfprintf+0xce>
 ade:	37 fc       	sbrc	r3, 7
 ae0:	2d c0       	rjmp	.+90     	; 0xb3c <vfprintf+0xf2>
 ae2:	20 ed       	ldi	r18, 0xD0	; 208
 ae4:	28 0f       	add	r18, r24
 ae6:	2a 30       	cpi	r18, 0x0A	; 10
 ae8:	40 f0       	brcs	.+16     	; 0xafa <vfprintf+0xb0>
 aea:	8e 32       	cpi	r24, 0x2E	; 46
 aec:	b9 f4       	brne	.+46     	; 0xb1c <vfprintf+0xd2>
 aee:	36 fc       	sbrc	r3, 6
 af0:	75 c1       	rjmp	.+746    	; 0xddc <vfprintf+0x392>
 af2:	23 2d       	mov	r18, r3
 af4:	20 64       	ori	r18, 0x40	; 64
 af6:	32 2e       	mov	r3, r18
 af8:	19 c0       	rjmp	.+50     	; 0xb2c <vfprintf+0xe2>
 afa:	36 fe       	sbrs	r3, 6
 afc:	06 c0       	rjmp	.+12     	; 0xb0a <vfprintf+0xc0>
 afe:	8a e0       	ldi	r24, 0x0A	; 10
 b00:	98 9e       	mul	r9, r24
 b02:	20 0d       	add	r18, r0
 b04:	11 24       	eor	r1, r1
 b06:	92 2e       	mov	r9, r18
 b08:	11 c0       	rjmp	.+34     	; 0xb2c <vfprintf+0xe2>
 b0a:	ea e0       	ldi	r30, 0x0A	; 10
 b0c:	2e 9e       	mul	r2, r30
 b0e:	20 0d       	add	r18, r0
 b10:	11 24       	eor	r1, r1
 b12:	22 2e       	mov	r2, r18
 b14:	f3 2d       	mov	r31, r3
 b16:	f0 62       	ori	r31, 0x20	; 32
 b18:	3f 2e       	mov	r3, r31
 b1a:	08 c0       	rjmp	.+16     	; 0xb2c <vfprintf+0xe2>
 b1c:	8c 36       	cpi	r24, 0x6C	; 108
 b1e:	21 f4       	brne	.+8      	; 0xb28 <vfprintf+0xde>
 b20:	83 2d       	mov	r24, r3
 b22:	80 68       	ori	r24, 0x80	; 128
 b24:	38 2e       	mov	r3, r24
 b26:	02 c0       	rjmp	.+4      	; 0xb2c <vfprintf+0xe2>
 b28:	88 36       	cpi	r24, 0x68	; 104
 b2a:	41 f4       	brne	.+16     	; 0xb3c <vfprintf+0xf2>
 b2c:	f7 01       	movw	r30, r14
 b2e:	93 fd       	sbrc	r25, 3
 b30:	85 91       	lpm	r24, Z+
 b32:	93 ff       	sbrs	r25, 3
 b34:	81 91       	ld	r24, Z+
 b36:	7f 01       	movw	r14, r30
 b38:	81 11       	cpse	r24, r1
 b3a:	b3 cf       	rjmp	.-154    	; 0xaa2 <vfprintf+0x58>
 b3c:	98 2f       	mov	r25, r24
 b3e:	9f 7d       	andi	r25, 0xDF	; 223
 b40:	95 54       	subi	r25, 0x45	; 69
 b42:	93 30       	cpi	r25, 0x03	; 3
 b44:	28 f4       	brcc	.+10     	; 0xb50 <vfprintf+0x106>
 b46:	0c 5f       	subi	r16, 0xFC	; 252
 b48:	1f 4f       	sbci	r17, 0xFF	; 255
 b4a:	9f e3       	ldi	r25, 0x3F	; 63
 b4c:	99 83       	std	Y+1, r25	; 0x01
 b4e:	0d c0       	rjmp	.+26     	; 0xb6a <vfprintf+0x120>
 b50:	83 36       	cpi	r24, 0x63	; 99
 b52:	31 f0       	breq	.+12     	; 0xb60 <vfprintf+0x116>
 b54:	83 37       	cpi	r24, 0x73	; 115
 b56:	71 f0       	breq	.+28     	; 0xb74 <vfprintf+0x12a>
 b58:	83 35       	cpi	r24, 0x53	; 83
 b5a:	09 f0       	breq	.+2      	; 0xb5e <vfprintf+0x114>
 b5c:	55 c0       	rjmp	.+170    	; 0xc08 <vfprintf+0x1be>
 b5e:	20 c0       	rjmp	.+64     	; 0xba0 <vfprintf+0x156>
 b60:	f8 01       	movw	r30, r16
 b62:	80 81       	ld	r24, Z
 b64:	89 83       	std	Y+1, r24	; 0x01
 b66:	0e 5f       	subi	r16, 0xFE	; 254
 b68:	1f 4f       	sbci	r17, 0xFF	; 255
 b6a:	88 24       	eor	r8, r8
 b6c:	83 94       	inc	r8
 b6e:	91 2c       	mov	r9, r1
 b70:	53 01       	movw	r10, r6
 b72:	12 c0       	rjmp	.+36     	; 0xb98 <vfprintf+0x14e>
 b74:	28 01       	movw	r4, r16
 b76:	f2 e0       	ldi	r31, 0x02	; 2
 b78:	4f 0e       	add	r4, r31
 b7a:	51 1c       	adc	r5, r1
 b7c:	f8 01       	movw	r30, r16
 b7e:	a0 80       	ld	r10, Z
 b80:	b1 80       	ldd	r11, Z+1	; 0x01
 b82:	36 fe       	sbrs	r3, 6
 b84:	03 c0       	rjmp	.+6      	; 0xb8c <vfprintf+0x142>
 b86:	69 2d       	mov	r22, r9
 b88:	70 e0       	ldi	r23, 0x00	; 0
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <vfprintf+0x146>
 b8c:	6f ef       	ldi	r22, 0xFF	; 255
 b8e:	7f ef       	ldi	r23, 0xFF	; 255
 b90:	c5 01       	movw	r24, r10
 b92:	38 d1       	rcall	.+624    	; 0xe04 <strnlen>
 b94:	4c 01       	movw	r8, r24
 b96:	82 01       	movw	r16, r4
 b98:	f3 2d       	mov	r31, r3
 b9a:	ff 77       	andi	r31, 0x7F	; 127
 b9c:	3f 2e       	mov	r3, r31
 b9e:	15 c0       	rjmp	.+42     	; 0xbca <vfprintf+0x180>
 ba0:	28 01       	movw	r4, r16
 ba2:	22 e0       	ldi	r18, 0x02	; 2
 ba4:	42 0e       	add	r4, r18
 ba6:	51 1c       	adc	r5, r1
 ba8:	f8 01       	movw	r30, r16
 baa:	a0 80       	ld	r10, Z
 bac:	b1 80       	ldd	r11, Z+1	; 0x01
 bae:	36 fe       	sbrs	r3, 6
 bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <vfprintf+0x16e>
 bb2:	69 2d       	mov	r22, r9
 bb4:	70 e0       	ldi	r23, 0x00	; 0
 bb6:	02 c0       	rjmp	.+4      	; 0xbbc <vfprintf+0x172>
 bb8:	6f ef       	ldi	r22, 0xFF	; 255
 bba:	7f ef       	ldi	r23, 0xFF	; 255
 bbc:	c5 01       	movw	r24, r10
 bbe:	17 d1       	rcall	.+558    	; 0xdee <strnlen_P>
 bc0:	4c 01       	movw	r8, r24
 bc2:	f3 2d       	mov	r31, r3
 bc4:	f0 68       	ori	r31, 0x80	; 128
 bc6:	3f 2e       	mov	r3, r31
 bc8:	82 01       	movw	r16, r4
 bca:	33 fc       	sbrc	r3, 3
 bcc:	19 c0       	rjmp	.+50     	; 0xc00 <vfprintf+0x1b6>
 bce:	82 2d       	mov	r24, r2
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	88 16       	cp	r8, r24
 bd4:	99 06       	cpc	r9, r25
 bd6:	a0 f4       	brcc	.+40     	; 0xc00 <vfprintf+0x1b6>
 bd8:	b6 01       	movw	r22, r12
 bda:	80 e2       	ldi	r24, 0x20	; 32
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	1d d1       	rcall	.+570    	; 0xe1a <fputc>
 be0:	2a 94       	dec	r2
 be2:	f5 cf       	rjmp	.-22     	; 0xbce <vfprintf+0x184>
 be4:	f5 01       	movw	r30, r10
 be6:	37 fc       	sbrc	r3, 7
 be8:	85 91       	lpm	r24, Z+
 bea:	37 fe       	sbrs	r3, 7
 bec:	81 91       	ld	r24, Z+
 bee:	5f 01       	movw	r10, r30
 bf0:	b6 01       	movw	r22, r12
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	12 d1       	rcall	.+548    	; 0xe1a <fputc>
 bf6:	21 10       	cpse	r2, r1
 bf8:	2a 94       	dec	r2
 bfa:	21 e0       	ldi	r18, 0x01	; 1
 bfc:	82 1a       	sub	r8, r18
 bfe:	91 08       	sbc	r9, r1
 c00:	81 14       	cp	r8, r1
 c02:	91 04       	cpc	r9, r1
 c04:	79 f7       	brne	.-34     	; 0xbe4 <vfprintf+0x19a>
 c06:	e1 c0       	rjmp	.+450    	; 0xdca <vfprintf+0x380>
 c08:	84 36       	cpi	r24, 0x64	; 100
 c0a:	11 f0       	breq	.+4      	; 0xc10 <vfprintf+0x1c6>
 c0c:	89 36       	cpi	r24, 0x69	; 105
 c0e:	39 f5       	brne	.+78     	; 0xc5e <vfprintf+0x214>
 c10:	f8 01       	movw	r30, r16
 c12:	37 fe       	sbrs	r3, 7
 c14:	07 c0       	rjmp	.+14     	; 0xc24 <vfprintf+0x1da>
 c16:	60 81       	ld	r22, Z
 c18:	71 81       	ldd	r23, Z+1	; 0x01
 c1a:	82 81       	ldd	r24, Z+2	; 0x02
 c1c:	93 81       	ldd	r25, Z+3	; 0x03
 c1e:	0c 5f       	subi	r16, 0xFC	; 252
 c20:	1f 4f       	sbci	r17, 0xFF	; 255
 c22:	08 c0       	rjmp	.+16     	; 0xc34 <vfprintf+0x1ea>
 c24:	60 81       	ld	r22, Z
 c26:	71 81       	ldd	r23, Z+1	; 0x01
 c28:	07 2e       	mov	r0, r23
 c2a:	00 0c       	add	r0, r0
 c2c:	88 0b       	sbc	r24, r24
 c2e:	99 0b       	sbc	r25, r25
 c30:	0e 5f       	subi	r16, 0xFE	; 254
 c32:	1f 4f       	sbci	r17, 0xFF	; 255
 c34:	f3 2d       	mov	r31, r3
 c36:	ff 76       	andi	r31, 0x6F	; 111
 c38:	3f 2e       	mov	r3, r31
 c3a:	97 ff       	sbrs	r25, 7
 c3c:	09 c0       	rjmp	.+18     	; 0xc50 <vfprintf+0x206>
 c3e:	90 95       	com	r25
 c40:	80 95       	com	r24
 c42:	70 95       	com	r23
 c44:	61 95       	neg	r22
 c46:	7f 4f       	sbci	r23, 0xFF	; 255
 c48:	8f 4f       	sbci	r24, 0xFF	; 255
 c4a:	9f 4f       	sbci	r25, 0xFF	; 255
 c4c:	f0 68       	ori	r31, 0x80	; 128
 c4e:	3f 2e       	mov	r3, r31
 c50:	2a e0       	ldi	r18, 0x0A	; 10
 c52:	30 e0       	ldi	r19, 0x00	; 0
 c54:	a3 01       	movw	r20, r6
 c56:	1d d1       	rcall	.+570    	; 0xe92 <__ultoa_invert>
 c58:	88 2e       	mov	r8, r24
 c5a:	86 18       	sub	r8, r6
 c5c:	44 c0       	rjmp	.+136    	; 0xce6 <vfprintf+0x29c>
 c5e:	85 37       	cpi	r24, 0x75	; 117
 c60:	31 f4       	brne	.+12     	; 0xc6e <vfprintf+0x224>
 c62:	23 2d       	mov	r18, r3
 c64:	2f 7e       	andi	r18, 0xEF	; 239
 c66:	b2 2e       	mov	r11, r18
 c68:	2a e0       	ldi	r18, 0x0A	; 10
 c6a:	30 e0       	ldi	r19, 0x00	; 0
 c6c:	25 c0       	rjmp	.+74     	; 0xcb8 <vfprintf+0x26e>
 c6e:	93 2d       	mov	r25, r3
 c70:	99 7f       	andi	r25, 0xF9	; 249
 c72:	b9 2e       	mov	r11, r25
 c74:	8f 36       	cpi	r24, 0x6F	; 111
 c76:	c1 f0       	breq	.+48     	; 0xca8 <vfprintf+0x25e>
 c78:	18 f4       	brcc	.+6      	; 0xc80 <vfprintf+0x236>
 c7a:	88 35       	cpi	r24, 0x58	; 88
 c7c:	79 f0       	breq	.+30     	; 0xc9c <vfprintf+0x252>
 c7e:	ae c0       	rjmp	.+348    	; 0xddc <vfprintf+0x392>
 c80:	80 37       	cpi	r24, 0x70	; 112
 c82:	19 f0       	breq	.+6      	; 0xc8a <vfprintf+0x240>
 c84:	88 37       	cpi	r24, 0x78	; 120
 c86:	21 f0       	breq	.+8      	; 0xc90 <vfprintf+0x246>
 c88:	a9 c0       	rjmp	.+338    	; 0xddc <vfprintf+0x392>
 c8a:	e9 2f       	mov	r30, r25
 c8c:	e0 61       	ori	r30, 0x10	; 16
 c8e:	be 2e       	mov	r11, r30
 c90:	b4 fe       	sbrs	r11, 4
 c92:	0d c0       	rjmp	.+26     	; 0xcae <vfprintf+0x264>
 c94:	fb 2d       	mov	r31, r11
 c96:	f4 60       	ori	r31, 0x04	; 4
 c98:	bf 2e       	mov	r11, r31
 c9a:	09 c0       	rjmp	.+18     	; 0xcae <vfprintf+0x264>
 c9c:	34 fe       	sbrs	r3, 4
 c9e:	0a c0       	rjmp	.+20     	; 0xcb4 <vfprintf+0x26a>
 ca0:	29 2f       	mov	r18, r25
 ca2:	26 60       	ori	r18, 0x06	; 6
 ca4:	b2 2e       	mov	r11, r18
 ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <vfprintf+0x26a>
 ca8:	28 e0       	ldi	r18, 0x08	; 8
 caa:	30 e0       	ldi	r19, 0x00	; 0
 cac:	05 c0       	rjmp	.+10     	; 0xcb8 <vfprintf+0x26e>
 cae:	20 e1       	ldi	r18, 0x10	; 16
 cb0:	30 e0       	ldi	r19, 0x00	; 0
 cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <vfprintf+0x26e>
 cb4:	20 e1       	ldi	r18, 0x10	; 16
 cb6:	32 e0       	ldi	r19, 0x02	; 2
 cb8:	f8 01       	movw	r30, r16
 cba:	b7 fe       	sbrs	r11, 7
 cbc:	07 c0       	rjmp	.+14     	; 0xccc <vfprintf+0x282>
 cbe:	60 81       	ld	r22, Z
 cc0:	71 81       	ldd	r23, Z+1	; 0x01
 cc2:	82 81       	ldd	r24, Z+2	; 0x02
 cc4:	93 81       	ldd	r25, Z+3	; 0x03
 cc6:	0c 5f       	subi	r16, 0xFC	; 252
 cc8:	1f 4f       	sbci	r17, 0xFF	; 255
 cca:	06 c0       	rjmp	.+12     	; 0xcd8 <vfprintf+0x28e>
 ccc:	60 81       	ld	r22, Z
 cce:	71 81       	ldd	r23, Z+1	; 0x01
 cd0:	80 e0       	ldi	r24, 0x00	; 0
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	0e 5f       	subi	r16, 0xFE	; 254
 cd6:	1f 4f       	sbci	r17, 0xFF	; 255
 cd8:	a3 01       	movw	r20, r6
 cda:	db d0       	rcall	.+438    	; 0xe92 <__ultoa_invert>
 cdc:	88 2e       	mov	r8, r24
 cde:	86 18       	sub	r8, r6
 ce0:	fb 2d       	mov	r31, r11
 ce2:	ff 77       	andi	r31, 0x7F	; 127
 ce4:	3f 2e       	mov	r3, r31
 ce6:	36 fe       	sbrs	r3, 6
 ce8:	0d c0       	rjmp	.+26     	; 0xd04 <vfprintf+0x2ba>
 cea:	23 2d       	mov	r18, r3
 cec:	2e 7f       	andi	r18, 0xFE	; 254
 cee:	a2 2e       	mov	r10, r18
 cf0:	89 14       	cp	r8, r9
 cf2:	58 f4       	brcc	.+22     	; 0xd0a <vfprintf+0x2c0>
 cf4:	34 fe       	sbrs	r3, 4
 cf6:	0b c0       	rjmp	.+22     	; 0xd0e <vfprintf+0x2c4>
 cf8:	32 fc       	sbrc	r3, 2
 cfa:	09 c0       	rjmp	.+18     	; 0xd0e <vfprintf+0x2c4>
 cfc:	83 2d       	mov	r24, r3
 cfe:	8e 7e       	andi	r24, 0xEE	; 238
 d00:	a8 2e       	mov	r10, r24
 d02:	05 c0       	rjmp	.+10     	; 0xd0e <vfprintf+0x2c4>
 d04:	b8 2c       	mov	r11, r8
 d06:	a3 2c       	mov	r10, r3
 d08:	03 c0       	rjmp	.+6      	; 0xd10 <vfprintf+0x2c6>
 d0a:	b8 2c       	mov	r11, r8
 d0c:	01 c0       	rjmp	.+2      	; 0xd10 <vfprintf+0x2c6>
 d0e:	b9 2c       	mov	r11, r9
 d10:	a4 fe       	sbrs	r10, 4
 d12:	0f c0       	rjmp	.+30     	; 0xd32 <vfprintf+0x2e8>
 d14:	fe 01       	movw	r30, r28
 d16:	e8 0d       	add	r30, r8
 d18:	f1 1d       	adc	r31, r1
 d1a:	80 81       	ld	r24, Z
 d1c:	80 33       	cpi	r24, 0x30	; 48
 d1e:	21 f4       	brne	.+8      	; 0xd28 <vfprintf+0x2de>
 d20:	9a 2d       	mov	r25, r10
 d22:	99 7e       	andi	r25, 0xE9	; 233
 d24:	a9 2e       	mov	r10, r25
 d26:	09 c0       	rjmp	.+18     	; 0xd3a <vfprintf+0x2f0>
 d28:	a2 fe       	sbrs	r10, 2
 d2a:	06 c0       	rjmp	.+12     	; 0xd38 <vfprintf+0x2ee>
 d2c:	b3 94       	inc	r11
 d2e:	b3 94       	inc	r11
 d30:	04 c0       	rjmp	.+8      	; 0xd3a <vfprintf+0x2f0>
 d32:	8a 2d       	mov	r24, r10
 d34:	86 78       	andi	r24, 0x86	; 134
 d36:	09 f0       	breq	.+2      	; 0xd3a <vfprintf+0x2f0>
 d38:	b3 94       	inc	r11
 d3a:	a3 fc       	sbrc	r10, 3
 d3c:	10 c0       	rjmp	.+32     	; 0xd5e <vfprintf+0x314>
 d3e:	a0 fe       	sbrs	r10, 0
 d40:	06 c0       	rjmp	.+12     	; 0xd4e <vfprintf+0x304>
 d42:	b2 14       	cp	r11, r2
 d44:	80 f4       	brcc	.+32     	; 0xd66 <vfprintf+0x31c>
 d46:	28 0c       	add	r2, r8
 d48:	92 2c       	mov	r9, r2
 d4a:	9b 18       	sub	r9, r11
 d4c:	0d c0       	rjmp	.+26     	; 0xd68 <vfprintf+0x31e>
 d4e:	b2 14       	cp	r11, r2
 d50:	58 f4       	brcc	.+22     	; 0xd68 <vfprintf+0x31e>
 d52:	b6 01       	movw	r22, r12
 d54:	80 e2       	ldi	r24, 0x20	; 32
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	60 d0       	rcall	.+192    	; 0xe1a <fputc>
 d5a:	b3 94       	inc	r11
 d5c:	f8 cf       	rjmp	.-16     	; 0xd4e <vfprintf+0x304>
 d5e:	b2 14       	cp	r11, r2
 d60:	18 f4       	brcc	.+6      	; 0xd68 <vfprintf+0x31e>
 d62:	2b 18       	sub	r2, r11
 d64:	02 c0       	rjmp	.+4      	; 0xd6a <vfprintf+0x320>
 d66:	98 2c       	mov	r9, r8
 d68:	21 2c       	mov	r2, r1
 d6a:	a4 fe       	sbrs	r10, 4
 d6c:	0f c0       	rjmp	.+30     	; 0xd8c <vfprintf+0x342>
 d6e:	b6 01       	movw	r22, r12
 d70:	80 e3       	ldi	r24, 0x30	; 48
 d72:	90 e0       	ldi	r25, 0x00	; 0
 d74:	52 d0       	rcall	.+164    	; 0xe1a <fputc>
 d76:	a2 fe       	sbrs	r10, 2
 d78:	16 c0       	rjmp	.+44     	; 0xda6 <vfprintf+0x35c>
 d7a:	a1 fc       	sbrc	r10, 1
 d7c:	03 c0       	rjmp	.+6      	; 0xd84 <vfprintf+0x33a>
 d7e:	88 e7       	ldi	r24, 0x78	; 120
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	02 c0       	rjmp	.+4      	; 0xd88 <vfprintf+0x33e>
 d84:	88 e5       	ldi	r24, 0x58	; 88
 d86:	90 e0       	ldi	r25, 0x00	; 0
 d88:	b6 01       	movw	r22, r12
 d8a:	0c c0       	rjmp	.+24     	; 0xda4 <vfprintf+0x35a>
 d8c:	8a 2d       	mov	r24, r10
 d8e:	86 78       	andi	r24, 0x86	; 134
 d90:	51 f0       	breq	.+20     	; 0xda6 <vfprintf+0x35c>
 d92:	a1 fe       	sbrs	r10, 1
 d94:	02 c0       	rjmp	.+4      	; 0xd9a <vfprintf+0x350>
 d96:	8b e2       	ldi	r24, 0x2B	; 43
 d98:	01 c0       	rjmp	.+2      	; 0xd9c <vfprintf+0x352>
 d9a:	80 e2       	ldi	r24, 0x20	; 32
 d9c:	a7 fc       	sbrc	r10, 7
 d9e:	8d e2       	ldi	r24, 0x2D	; 45
 da0:	b6 01       	movw	r22, r12
 da2:	90 e0       	ldi	r25, 0x00	; 0
 da4:	3a d0       	rcall	.+116    	; 0xe1a <fputc>
 da6:	89 14       	cp	r8, r9
 da8:	30 f4       	brcc	.+12     	; 0xdb6 <vfprintf+0x36c>
 daa:	b6 01       	movw	r22, r12
 dac:	80 e3       	ldi	r24, 0x30	; 48
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	34 d0       	rcall	.+104    	; 0xe1a <fputc>
 db2:	9a 94       	dec	r9
 db4:	f8 cf       	rjmp	.-16     	; 0xda6 <vfprintf+0x35c>
 db6:	8a 94       	dec	r8
 db8:	f3 01       	movw	r30, r6
 dba:	e8 0d       	add	r30, r8
 dbc:	f1 1d       	adc	r31, r1
 dbe:	80 81       	ld	r24, Z
 dc0:	b6 01       	movw	r22, r12
 dc2:	90 e0       	ldi	r25, 0x00	; 0
 dc4:	2a d0       	rcall	.+84     	; 0xe1a <fputc>
 dc6:	81 10       	cpse	r8, r1
 dc8:	f6 cf       	rjmp	.-20     	; 0xdb6 <vfprintf+0x36c>
 dca:	22 20       	and	r2, r2
 dcc:	09 f4       	brne	.+2      	; 0xdd0 <vfprintf+0x386>
 dce:	4e ce       	rjmp	.-868    	; 0xa6c <vfprintf+0x22>
 dd0:	b6 01       	movw	r22, r12
 dd2:	80 e2       	ldi	r24, 0x20	; 32
 dd4:	90 e0       	ldi	r25, 0x00	; 0
 dd6:	21 d0       	rcall	.+66     	; 0xe1a <fputc>
 dd8:	2a 94       	dec	r2
 dda:	f7 cf       	rjmp	.-18     	; 0xdca <vfprintf+0x380>
 ddc:	f6 01       	movw	r30, r12
 dde:	86 81       	ldd	r24, Z+6	; 0x06
 de0:	97 81       	ldd	r25, Z+7	; 0x07
 de2:	02 c0       	rjmp	.+4      	; 0xde8 <vfprintf+0x39e>
 de4:	8f ef       	ldi	r24, 0xFF	; 255
 de6:	9f ef       	ldi	r25, 0xFF	; 255
 de8:	2b 96       	adiw	r28, 0x0b	; 11
 dea:	e2 e1       	ldi	r30, 0x12	; 18
 dec:	cc c0       	rjmp	.+408    	; 0xf86 <__epilogue_restores__>

00000dee <strnlen_P>:
 dee:	fc 01       	movw	r30, r24
 df0:	05 90       	lpm	r0, Z+
 df2:	61 50       	subi	r22, 0x01	; 1
 df4:	70 40       	sbci	r23, 0x00	; 0
 df6:	01 10       	cpse	r0, r1
 df8:	d8 f7       	brcc	.-10     	; 0xdf0 <strnlen_P+0x2>
 dfa:	80 95       	com	r24
 dfc:	90 95       	com	r25
 dfe:	8e 0f       	add	r24, r30
 e00:	9f 1f       	adc	r25, r31
 e02:	08 95       	ret

00000e04 <strnlen>:
 e04:	fc 01       	movw	r30, r24
 e06:	61 50       	subi	r22, 0x01	; 1
 e08:	70 40       	sbci	r23, 0x00	; 0
 e0a:	01 90       	ld	r0, Z+
 e0c:	01 10       	cpse	r0, r1
 e0e:	d8 f7       	brcc	.-10     	; 0xe06 <strnlen+0x2>
 e10:	80 95       	com	r24
 e12:	90 95       	com	r25
 e14:	8e 0f       	add	r24, r30
 e16:	9f 1f       	adc	r25, r31
 e18:	08 95       	ret

00000e1a <fputc>:
 e1a:	0f 93       	push	r16
 e1c:	1f 93       	push	r17
 e1e:	cf 93       	push	r28
 e20:	df 93       	push	r29
 e22:	fb 01       	movw	r30, r22
 e24:	23 81       	ldd	r18, Z+3	; 0x03
 e26:	21 fd       	sbrc	r18, 1
 e28:	03 c0       	rjmp	.+6      	; 0xe30 <fputc+0x16>
 e2a:	8f ef       	ldi	r24, 0xFF	; 255
 e2c:	9f ef       	ldi	r25, 0xFF	; 255
 e2e:	2c c0       	rjmp	.+88     	; 0xe88 <fputc+0x6e>
 e30:	22 ff       	sbrs	r18, 2
 e32:	16 c0       	rjmp	.+44     	; 0xe60 <fputc+0x46>
 e34:	46 81       	ldd	r20, Z+6	; 0x06
 e36:	57 81       	ldd	r21, Z+7	; 0x07
 e38:	24 81       	ldd	r18, Z+4	; 0x04
 e3a:	35 81       	ldd	r19, Z+5	; 0x05
 e3c:	42 17       	cp	r20, r18
 e3e:	53 07       	cpc	r21, r19
 e40:	44 f4       	brge	.+16     	; 0xe52 <fputc+0x38>
 e42:	a0 81       	ld	r26, Z
 e44:	b1 81       	ldd	r27, Z+1	; 0x01
 e46:	9d 01       	movw	r18, r26
 e48:	2f 5f       	subi	r18, 0xFF	; 255
 e4a:	3f 4f       	sbci	r19, 0xFF	; 255
 e4c:	31 83       	std	Z+1, r19	; 0x01
 e4e:	20 83       	st	Z, r18
 e50:	8c 93       	st	X, r24
 e52:	26 81       	ldd	r18, Z+6	; 0x06
 e54:	37 81       	ldd	r19, Z+7	; 0x07
 e56:	2f 5f       	subi	r18, 0xFF	; 255
 e58:	3f 4f       	sbci	r19, 0xFF	; 255
 e5a:	37 83       	std	Z+7, r19	; 0x07
 e5c:	26 83       	std	Z+6, r18	; 0x06
 e5e:	14 c0       	rjmp	.+40     	; 0xe88 <fputc+0x6e>
 e60:	8b 01       	movw	r16, r22
 e62:	ec 01       	movw	r28, r24
 e64:	fb 01       	movw	r30, r22
 e66:	00 84       	ldd	r0, Z+8	; 0x08
 e68:	f1 85       	ldd	r31, Z+9	; 0x09
 e6a:	e0 2d       	mov	r30, r0
 e6c:	09 95       	icall
 e6e:	89 2b       	or	r24, r25
 e70:	e1 f6       	brne	.-72     	; 0xe2a <fputc+0x10>
 e72:	d8 01       	movw	r26, r16
 e74:	16 96       	adiw	r26, 0x06	; 6
 e76:	8d 91       	ld	r24, X+
 e78:	9c 91       	ld	r25, X
 e7a:	17 97       	sbiw	r26, 0x07	; 7
 e7c:	01 96       	adiw	r24, 0x01	; 1
 e7e:	17 96       	adiw	r26, 0x07	; 7
 e80:	9c 93       	st	X, r25
 e82:	8e 93       	st	-X, r24
 e84:	16 97       	sbiw	r26, 0x06	; 6
 e86:	ce 01       	movw	r24, r28
 e88:	df 91       	pop	r29
 e8a:	cf 91       	pop	r28
 e8c:	1f 91       	pop	r17
 e8e:	0f 91       	pop	r16
 e90:	08 95       	ret

00000e92 <__ultoa_invert>:
 e92:	fa 01       	movw	r30, r20
 e94:	aa 27       	eor	r26, r26
 e96:	28 30       	cpi	r18, 0x08	; 8
 e98:	51 f1       	breq	.+84     	; 0xeee <__ultoa_invert+0x5c>
 e9a:	20 31       	cpi	r18, 0x10	; 16
 e9c:	81 f1       	breq	.+96     	; 0xefe <__ultoa_invert+0x6c>
 e9e:	e8 94       	clt
 ea0:	6f 93       	push	r22
 ea2:	6e 7f       	andi	r22, 0xFE	; 254
 ea4:	6e 5f       	subi	r22, 0xFE	; 254
 ea6:	7f 4f       	sbci	r23, 0xFF	; 255
 ea8:	8f 4f       	sbci	r24, 0xFF	; 255
 eaa:	9f 4f       	sbci	r25, 0xFF	; 255
 eac:	af 4f       	sbci	r26, 0xFF	; 255
 eae:	b1 e0       	ldi	r27, 0x01	; 1
 eb0:	3e d0       	rcall	.+124    	; 0xf2e <__ultoa_invert+0x9c>
 eb2:	b4 e0       	ldi	r27, 0x04	; 4
 eb4:	3c d0       	rcall	.+120    	; 0xf2e <__ultoa_invert+0x9c>
 eb6:	67 0f       	add	r22, r23
 eb8:	78 1f       	adc	r23, r24
 eba:	89 1f       	adc	r24, r25
 ebc:	9a 1f       	adc	r25, r26
 ebe:	a1 1d       	adc	r26, r1
 ec0:	68 0f       	add	r22, r24
 ec2:	79 1f       	adc	r23, r25
 ec4:	8a 1f       	adc	r24, r26
 ec6:	91 1d       	adc	r25, r1
 ec8:	a1 1d       	adc	r26, r1
 eca:	6a 0f       	add	r22, r26
 ecc:	71 1d       	adc	r23, r1
 ece:	81 1d       	adc	r24, r1
 ed0:	91 1d       	adc	r25, r1
 ed2:	a1 1d       	adc	r26, r1
 ed4:	20 d0       	rcall	.+64     	; 0xf16 <__ultoa_invert+0x84>
 ed6:	09 f4       	brne	.+2      	; 0xeda <__ultoa_invert+0x48>
 ed8:	68 94       	set
 eda:	3f 91       	pop	r19
 edc:	2a e0       	ldi	r18, 0x0A	; 10
 ede:	26 9f       	mul	r18, r22
 ee0:	11 24       	eor	r1, r1
 ee2:	30 19       	sub	r19, r0
 ee4:	30 5d       	subi	r19, 0xD0	; 208
 ee6:	31 93       	st	Z+, r19
 ee8:	de f6       	brtc	.-74     	; 0xea0 <__ultoa_invert+0xe>
 eea:	cf 01       	movw	r24, r30
 eec:	08 95       	ret
 eee:	46 2f       	mov	r20, r22
 ef0:	47 70       	andi	r20, 0x07	; 7
 ef2:	40 5d       	subi	r20, 0xD0	; 208
 ef4:	41 93       	st	Z+, r20
 ef6:	b3 e0       	ldi	r27, 0x03	; 3
 ef8:	0f d0       	rcall	.+30     	; 0xf18 <__ultoa_invert+0x86>
 efa:	c9 f7       	brne	.-14     	; 0xeee <__ultoa_invert+0x5c>
 efc:	f6 cf       	rjmp	.-20     	; 0xeea <__ultoa_invert+0x58>
 efe:	46 2f       	mov	r20, r22
 f00:	4f 70       	andi	r20, 0x0F	; 15
 f02:	40 5d       	subi	r20, 0xD0	; 208
 f04:	4a 33       	cpi	r20, 0x3A	; 58
 f06:	18 f0       	brcs	.+6      	; 0xf0e <__ultoa_invert+0x7c>
 f08:	49 5d       	subi	r20, 0xD9	; 217
 f0a:	31 fd       	sbrc	r19, 1
 f0c:	40 52       	subi	r20, 0x20	; 32
 f0e:	41 93       	st	Z+, r20
 f10:	02 d0       	rcall	.+4      	; 0xf16 <__ultoa_invert+0x84>
 f12:	a9 f7       	brne	.-22     	; 0xefe <__ultoa_invert+0x6c>
 f14:	ea cf       	rjmp	.-44     	; 0xeea <__ultoa_invert+0x58>
 f16:	b4 e0       	ldi	r27, 0x04	; 4
 f18:	a6 95       	lsr	r26
 f1a:	97 95       	ror	r25
 f1c:	87 95       	ror	r24
 f1e:	77 95       	ror	r23
 f20:	67 95       	ror	r22
 f22:	ba 95       	dec	r27
 f24:	c9 f7       	brne	.-14     	; 0xf18 <__ultoa_invert+0x86>
 f26:	00 97       	sbiw	r24, 0x00	; 0
 f28:	61 05       	cpc	r22, r1
 f2a:	71 05       	cpc	r23, r1
 f2c:	08 95       	ret
 f2e:	9b 01       	movw	r18, r22
 f30:	ac 01       	movw	r20, r24
 f32:	0a 2e       	mov	r0, r26
 f34:	06 94       	lsr	r0
 f36:	57 95       	ror	r21
 f38:	47 95       	ror	r20
 f3a:	37 95       	ror	r19
 f3c:	27 95       	ror	r18
 f3e:	ba 95       	dec	r27
 f40:	c9 f7       	brne	.-14     	; 0xf34 <__ultoa_invert+0xa2>
 f42:	62 0f       	add	r22, r18
 f44:	73 1f       	adc	r23, r19
 f46:	84 1f       	adc	r24, r20
 f48:	95 1f       	adc	r25, r21
 f4a:	a0 1d       	adc	r26, r0
 f4c:	08 95       	ret

00000f4e <__prologue_saves__>:
 f4e:	2f 92       	push	r2
 f50:	3f 92       	push	r3
 f52:	4f 92       	push	r4
 f54:	5f 92       	push	r5
 f56:	6f 92       	push	r6
 f58:	7f 92       	push	r7
 f5a:	8f 92       	push	r8
 f5c:	9f 92       	push	r9
 f5e:	af 92       	push	r10
 f60:	bf 92       	push	r11
 f62:	cf 92       	push	r12
 f64:	df 92       	push	r13
 f66:	ef 92       	push	r14
 f68:	ff 92       	push	r15
 f6a:	0f 93       	push	r16
 f6c:	1f 93       	push	r17
 f6e:	cf 93       	push	r28
 f70:	df 93       	push	r29
 f72:	cd b7       	in	r28, 0x3d	; 61
 f74:	de b7       	in	r29, 0x3e	; 62
 f76:	ca 1b       	sub	r28, r26
 f78:	db 0b       	sbc	r29, r27
 f7a:	0f b6       	in	r0, 0x3f	; 63
 f7c:	f8 94       	cli
 f7e:	de bf       	out	0x3e, r29	; 62
 f80:	0f be       	out	0x3f, r0	; 63
 f82:	cd bf       	out	0x3d, r28	; 61
 f84:	09 94       	ijmp

00000f86 <__epilogue_restores__>:
 f86:	2a 88       	ldd	r2, Y+18	; 0x12
 f88:	39 88       	ldd	r3, Y+17	; 0x11
 f8a:	48 88       	ldd	r4, Y+16	; 0x10
 f8c:	5f 84       	ldd	r5, Y+15	; 0x0f
 f8e:	6e 84       	ldd	r6, Y+14	; 0x0e
 f90:	7d 84       	ldd	r7, Y+13	; 0x0d
 f92:	8c 84       	ldd	r8, Y+12	; 0x0c
 f94:	9b 84       	ldd	r9, Y+11	; 0x0b
 f96:	aa 84       	ldd	r10, Y+10	; 0x0a
 f98:	b9 84       	ldd	r11, Y+9	; 0x09
 f9a:	c8 84       	ldd	r12, Y+8	; 0x08
 f9c:	df 80       	ldd	r13, Y+7	; 0x07
 f9e:	ee 80       	ldd	r14, Y+6	; 0x06
 fa0:	fd 80       	ldd	r15, Y+5	; 0x05
 fa2:	0c 81       	ldd	r16, Y+4	; 0x04
 fa4:	1b 81       	ldd	r17, Y+3	; 0x03
 fa6:	aa 81       	ldd	r26, Y+2	; 0x02
 fa8:	b9 81       	ldd	r27, Y+1	; 0x01
 faa:	ce 0f       	add	r28, r30
 fac:	d1 1d       	adc	r29, r1
 fae:	0f b6       	in	r0, 0x3f	; 63
 fb0:	f8 94       	cli
 fb2:	de bf       	out	0x3e, r29	; 62
 fb4:	0f be       	out	0x3f, r0	; 63
 fb6:	cd bf       	out	0x3d, r28	; 61
 fb8:	ed 01       	movw	r28, r26
 fba:	08 95       	ret

00000fbc <_exit>:
 fbc:	f8 94       	cli

00000fbe <__stop_program>:
 fbe:	ff cf       	rjmp	.-2      	; 0xfbe <__stop_program>
