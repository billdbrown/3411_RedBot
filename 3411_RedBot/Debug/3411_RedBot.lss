
3411_RedBot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  00000ae4  00000b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005e  0080017c  0080017c  00000bf4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ea  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aec  00000000  00000000  00001e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001011  00000000  00000000  000028fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00003910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001066c  00000000  00000000  00003a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000522  00000000  00000000  000140e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00014606  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000043f5  00000000  00000000  0001466e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 37       	cpi	r26, 0x7C	; 124
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e7       	ldi	r26, 0x7C	; 124
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3d       	cpi	r26, 0xDA	; 218
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	d3 d1       	rcall	.+934    	; 0x442 <main>
  9c:	21 c5       	rjmp	.+2626   	; 0xae0 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <uart_init>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
  a0:	87 e6       	ldi	r24, 0x67	; 103
  a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  ac:	08 95       	ret

000000ae <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24

  if (c == '\a')
  b2:	87 30       	cpi	r24, 0x07	; 7
  b4:	61 f4       	brne	.+24     	; 0xce <uart_putchar+0x20>
    {
      fputs("*ring*\n", stderr);
  b6:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <__iob+0x4>
  ba:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <__iob+0x5>
  be:	47 e0       	ldi	r20, 0x07	; 7
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	d7 d1       	rcall	.+942    	; 0x47a <fwrite>
      return 0;
  cc:	0b c0       	rjmp	.+22     	; 0xe4 <uart_putchar+0x36>
    }

  if (c == '\n')
  ce:	8a 30       	cpi	r24, 0x0A	; 10
  d0:	11 f4       	brne	.+4      	; 0xd6 <uart_putchar+0x28>
    uart_putchar('\r', stream);
  d2:	8d e0       	ldi	r24, 0x0D	; 13
  d4:	ec df       	rcall	.-40     	; 0xae <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
  d6:	e0 ec       	ldi	r30, 0xC0	; 192
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	85 ff       	sbrs	r24, 5
  de:	fd cf       	rjmp	.-6      	; 0xda <uart_putchar+0x2c>
  UDR0 = c;
  e0:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
  ec:	6f 92       	push	r6
  ee:	7f 92       	push	r7
  f0:	8f 92       	push	r8
  f2:	9f 92       	push	r9
  f4:	af 92       	push	r10
  f6:	bf 92       	push	r11
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 108:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <rxp.1827>
 10c:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <rxp.1827+0x1>
 110:	23 2b       	or	r18, r19
 112:	09 f0       	breq	.+2      	; 0x116 <uart_getchar+0x2a>
 114:	cc c0       	rjmp	.+408    	; 0x2ae <uart_getchar+0x1c2>
 116:	8c 01       	movw	r16, r24
 118:	0f 2e       	mov	r0, r31
 11a:	fc e7       	ldi	r31, 0x7C	; 124
 11c:	8f 2e       	mov	r8, r31
 11e:	f1 e0       	ldi	r31, 0x01	; 1
 120:	9f 2e       	mov	r9, r31
 122:	f0 2d       	mov	r31, r0
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 124:	c0 ec       	ldi	r28, 0xC0	; 192
 126:	d0 e0       	ldi	r29, 0x00	; 0
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
	c = UDR0;
 128:	0f 2e       	mov	r0, r31
 12a:	f6 ec       	ldi	r31, 0xC6	; 198
 12c:	cf 2e       	mov	r12, r31
 12e:	d1 2c       	mov	r13, r1
 130:	f0 2d       	mov	r31, r0
 132:	54 01       	movw	r10, r8
 134:	0f 2e       	mov	r0, r31
 136:	fb e7       	ldi	r31, 0x7B	; 123
 138:	6f 2e       	mov	r6, r31
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	7f 2e       	mov	r7, r31
 13e:	f0 2d       	mov	r31, r0
  static char *rxp;

  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 140:	88 81       	ld	r24, Y
 142:	88 23       	and	r24, r24
 144:	ec f7       	brge	.-6      	; 0x140 <uart_getchar+0x54>
	if (UCSR0A & _BV(FE0))
 146:	88 81       	ld	r24, Y
 148:	84 fd       	sbrc	r24, 4
 14a:	c4 c0       	rjmp	.+392    	; 0x2d4 <uart_getchar+0x1e8>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 14c:	88 81       	ld	r24, Y
 14e:	83 fd       	sbrc	r24, 3
 150:	c4 c0       	rjmp	.+392    	; 0x2da <uart_getchar+0x1ee>
	  return _FDEV_ERR;
	c = UDR0;
 152:	f6 01       	movw	r30, r12
 154:	80 81       	ld	r24, Z
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 156:	8d 30       	cpi	r24, 0x0D	; 13
 158:	11 f0       	breq	.+4      	; 0x15e <uart_getchar+0x72>
	  c = '\n';
	if (c == '\n')
 15a:	8a 30       	cpi	r24, 0x0A	; 10
 15c:	61 f4       	brne	.+24     	; 0x176 <uart_getchar+0x8a>
	  {
	    *cp = c;
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	f4 01       	movw	r30, r8
 162:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
 164:	b8 01       	movw	r22, r16
 166:	a3 df       	rcall	.-186    	; 0xae <uart_putchar>
	    rxp = b;
 168:	8c e7       	ldi	r24, 0x7C	; 124
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <rxp.1827+0x1>
 170:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <rxp.1827>
	    break;
 174:	9c c0       	rjmp	.+312    	; 0x2ae <uart_getchar+0x1c2>
	  }
	else if (c == '\t')
 176:	89 30       	cpi	r24, 0x09	; 9
 178:	39 f0       	breq	.+14     	; 0x188 <uart_getchar+0x9c>
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 17a:	90 ee       	ldi	r25, 0xE0	; 224
 17c:	98 0f       	add	r25, r24
 17e:	9f 35       	cpi	r25, 0x5F	; 95
 180:	20 f0       	brcs	.+8      	; 0x18a <uart_getchar+0x9e>
 182:	80 3a       	cpi	r24, 0xA0	; 160
 184:	a8 f0       	brcs	.+42     	; 0x1b0 <uart_getchar+0xc4>
 186:	01 c0       	rjmp	.+2      	; 0x18a <uart_getchar+0x9e>
	    uart_putchar(c, stream);
	    rxp = b;
	    break;
	  }
	else if (c == '\t')
	  c = ' ';
 188:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 18a:	fb ec       	ldi	r31, 0xCB	; 203
 18c:	8f 16       	cp	r8, r31
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	9f 06       	cpc	r9, r31
 192:	21 f4       	brne	.+8      	; 0x19c <uart_getchar+0xb0>
	      uart_putchar('\a', stream);
 194:	b8 01       	movw	r22, r16
 196:	87 e0       	ldi	r24, 0x07	; 7
 198:	8a df       	rcall	.-236    	; 0xae <uart_putchar>
 19a:	d2 cf       	rjmp	.-92     	; 0x140 <uart_getchar+0x54>
	    else
	      {
		*cp++ = c;
 19c:	74 01       	movw	r14, r8
 19e:	9f ef       	ldi	r25, 0xFF	; 255
 1a0:	e9 1a       	sub	r14, r25
 1a2:	f9 0a       	sbc	r15, r25
 1a4:	f4 01       	movw	r30, r8
		uart_putchar(c, stream);
 1a6:	80 83       	st	Z, r24
 1a8:	b8 01       	movw	r22, r16
 1aa:	81 df       	rcall	.-254    	; 0xae <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 1ac:	47 01       	movw	r8, r14
 1ae:	c8 cf       	rjmp	.-112    	; 0x140 <uart_getchar+0x54>
		uart_putchar(c, stream);
	      }
	    continue;
	  }

	switch (c)
 1b0:	82 31       	cpi	r24, 0x12	; 18
 1b2:	b9 f1       	breq	.+110    	; 0x222 <uart_getchar+0x136>
 1b4:	30 f4       	brcc	.+12     	; 0x1c2 <uart_getchar+0xd6>
 1b6:	83 30       	cpi	r24, 0x03	; 3
 1b8:	09 f4       	brne	.+2      	; 0x1bc <uart_getchar+0xd0>
 1ba:	92 c0       	rjmp	.+292    	; 0x2e0 <uart_getchar+0x1f4>
 1bc:	88 30       	cpi	r24, 0x08	; 8
 1be:	e9 f0       	breq	.+58     	; 0x1fa <uart_getchar+0x10e>
 1c0:	bf cf       	rjmp	.-130    	; 0x140 <uart_getchar+0x54>
 1c2:	87 31       	cpi	r24, 0x17	; 23
 1c4:	29 f0       	breq	.+10     	; 0x1d0 <uart_getchar+0xe4>
 1c6:	8f 37       	cpi	r24, 0x7F	; 127
 1c8:	c1 f0       	breq	.+48     	; 0x1fa <uart_getchar+0x10e>
 1ca:	85 31       	cpi	r24, 0x15	; 21
 1cc:	79 f0       	breq	.+30     	; 0x1ec <uart_getchar+0x100>
 1ce:	b8 cf       	rjmp	.-144    	; 0x140 <uart_getchar+0x54>
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 1d0:	fc e7       	ldi	r31, 0x7C	; 124
 1d2:	8f 16       	cp	r8, r31
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	9f 06       	cpc	r9, r31
 1d8:	09 f0       	breq	.+2      	; 0x1dc <uart_getchar+0xf0>
 1da:	08 f4       	brcc	.+2      	; 0x1de <uart_getchar+0xf2>
 1dc:	b1 cf       	rjmp	.-158    	; 0x140 <uart_getchar+0x54>
 1de:	f4 01       	movw	r30, r8
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	80 81       	ld	r24, Z
 1e4:	80 32       	cpi	r24, 0x20	; 32
 1e6:	09 f0       	breq	.+2      	; 0x1ea <uart_getchar+0xfe>
 1e8:	4a c0       	rjmp	.+148    	; 0x27e <uart_getchar+0x192>
 1ea:	aa cf       	rjmp	.-172    	; 0x140 <uart_getchar+0x54>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 1ec:	8c e7       	ldi	r24, 0x7C	; 124
 1ee:	88 16       	cp	r8, r24
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	98 06       	cpc	r9, r24
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <uart_getchar+0x10c>
 1f6:	70 f5       	brcc	.+92     	; 0x254 <uart_getchar+0x168>
 1f8:	a3 cf       	rjmp	.-186    	; 0x140 <uart_getchar+0x54>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 1fa:	9c e7       	ldi	r25, 0x7C	; 124
 1fc:	89 16       	cp	r8, r25
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	99 06       	cpc	r9, r25
 202:	09 f0       	breq	.+2      	; 0x206 <uart_getchar+0x11a>
 204:	08 f4       	brcc	.+2      	; 0x208 <uart_getchar+0x11c>
	      {
		uart_putchar('\b', stream);
 206:	9c cf       	rjmp	.-200    	; 0x140 <uart_getchar+0x54>
 208:	b8 01       	movw	r22, r16
 20a:	88 e0       	ldi	r24, 0x08	; 8
		uart_putchar(' ', stream);
 20c:	50 df       	rcall	.-352    	; 0xae <uart_putchar>
 20e:	b8 01       	movw	r22, r16
 210:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 212:	4d df       	rcall	.-358    	; 0xae <uart_putchar>
 214:	b8 01       	movw	r22, r16
 216:	88 e0       	ldi	r24, 0x08	; 8
 218:	4a df       	rcall	.-364    	; 0xae <uart_putchar>
		cp--;
 21a:	e1 e0       	ldi	r30, 0x01	; 1
 21c:	8e 1a       	sub	r8, r30
 21e:	91 08       	sbc	r9, r1
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 220:	8f cf       	rjmp	.-226    	; 0x140 <uart_getchar+0x54>
 222:	b8 01       	movw	r22, r16
 224:	8d e0       	ldi	r24, 0x0D	; 13
 226:	43 df       	rcall	.-378    	; 0xae <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 228:	fc e7       	ldi	r31, 0x7C	; 124
 22a:	8f 16       	cp	r8, r31
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	9f 06       	cpc	r9, r31
 230:	09 f0       	breq	.+2      	; 0x234 <uart_getchar+0x148>
 232:	08 f4       	brcc	.+2      	; 0x236 <uart_getchar+0x14a>
 234:	85 cf       	rjmp	.-246    	; 0x140 <uart_getchar+0x54>
 236:	0f 2e       	mov	r0, r31
 238:	fc e7       	ldi	r31, 0x7C	; 124
 23a:	ef 2e       	mov	r14, r31
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	ff 2e       	mov	r15, r31
	      uart_putchar(*cp2, stream);
 240:	f0 2d       	mov	r31, r0
 242:	b8 01       	movw	r22, r16
 244:	f7 01       	movw	r30, r14
 246:	81 91       	ld	r24, Z+
 248:	7f 01       	movw	r14, r30
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 24a:	31 df       	rcall	.-414    	; 0xae <uart_putchar>
 24c:	8e 14       	cp	r8, r14
 24e:	9f 04       	cpc	r9, r15
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 250:	c1 f7       	brne	.-16     	; 0x242 <uart_getchar+0x156>
 252:	76 cf       	rjmp	.-276    	; 0x140 <uart_getchar+0x54>
 254:	b8 01       	movw	r22, r16
		uart_putchar(' ', stream);
 256:	88 e0       	ldi	r24, 0x08	; 8
 258:	2a df       	rcall	.-428    	; 0xae <uart_putchar>
 25a:	b8 01       	movw	r22, r16
 25c:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 25e:	27 df       	rcall	.-434    	; 0xae <uart_putchar>
 260:	b8 01       	movw	r22, r16
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	24 df       	rcall	.-440    	; 0xae <uart_putchar>
		cp--;
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	8f 1a       	sub	r8, r31
 26a:	91 08       	sbc	r9, r1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 26c:	8c e7       	ldi	r24, 0x7C	; 124
 26e:	88 16       	cp	r8, r24
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	98 06       	cpc	r9, r24
 274:	79 f7       	brne	.-34     	; 0x254 <uart_getchar+0x168>
 276:	f3 01       	movw	r30, r6
 278:	31 96       	adiw	r30, 0x01	; 1
 27a:	4f 01       	movw	r8, r30
 27c:	61 cf       	rjmp	.-318    	; 0x140 <uart_getchar+0x54>
 27e:	74 01       	movw	r14, r8
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 280:	f1 e0       	ldi	r31, 0x01	; 1
 282:	ef 1a       	sub	r14, r31
 284:	f1 08       	sbc	r15, r1
 286:	b8 01       	movw	r22, r16
		uart_putchar(' ', stream);
 288:	88 e0       	ldi	r24, 0x08	; 8
 28a:	11 df       	rcall	.-478    	; 0xae <uart_putchar>
 28c:	b8 01       	movw	r22, r16
 28e:	80 e2       	ldi	r24, 0x20	; 32
		uart_putchar('\b', stream);
 290:	0e df       	rcall	.-484    	; 0xae <uart_putchar>
 292:	b8 01       	movw	r22, r16
 294:	88 e0       	ldi	r24, 0x08	; 8
 296:	0b df       	rcall	.-490    	; 0xae <uart_putchar>
		cp--;
 298:	47 01       	movw	r8, r14
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 29a:	ae 14       	cp	r10, r14
 29c:	bf 04       	cpc	r11, r15
 29e:	09 f4       	brne	.+2      	; 0x2a2 <uart_getchar+0x1b6>
 2a0:	4f cf       	rjmp	.-354    	; 0x140 <uart_getchar+0x54>
 2a2:	f7 01       	movw	r30, r14
 2a4:	82 91       	ld	r24, -Z
 2a6:	7f 01       	movw	r14, r30
 2a8:	80 32       	cpi	r24, 0x20	; 32
 2aa:	69 f7       	brne	.-38     	; 0x286 <uart_getchar+0x19a>
 2ac:	49 cf       	rjmp	.-366    	; 0x140 <uart_getchar+0x54>
	      }
	    break;
	  }
      }

  c = *rxp++;
 2ae:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <rxp.1827>
 2b2:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <rxp.1827+0x1>
 2b6:	cf 01       	movw	r24, r30
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <rxp.1827+0x1>
 2be:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <rxp.1827>
 2c2:	80 81       	ld	r24, Z
  if (c == '\n')
 2c4:	8a 30       	cpi	r24, 0x0A	; 10
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <uart_getchar+0x1e4>
    rxp = 0;
 2c8:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <rxp.1827+0x1>
 2cc:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <rxp.1827>

  return c;
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <uart_getchar+0x1f8>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 2d4:	8e ef       	ldi	r24, 0xFE	; 254
 2d6:	9f ef       	ldi	r25, 0xFF	; 255
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <uart_getchar+0x1f8>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	9f ef       	ldi	r25, 0xFF	; 255
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <uart_getchar+0x1f8>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	df 90       	pop	r13
 2f2:	cf 90       	pop	r12
 2f4:	bf 90       	pop	r11
 2f6:	af 90       	pop	r10
 2f8:	9f 90       	pop	r9
 2fa:	8f 90       	pop	r8
 2fc:	7f 90       	pop	r7
 2fe:	6f 90       	pop	r6
 300:	08 95       	ret

00000302 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 302:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 304:	84 b1       	in	r24, 0x04	; 4
 306:	80 62       	ori	r24, 0x20	; 32
 308:	8f 77       	andi	r24, 0x7F	; 127
 30a:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 30c:	89 2f       	mov	r24, r25
 30e:	80 6a       	ori	r24, 0xA0	; 160
 310:	85 b9       	out	0x05, r24	; 5
 312:	08 95       	ret

00000314 <ADC_init>:
int ADC_conv(void);
void sensor_and_motor_select(int sens_mot_sel);

void ADC_init(void)
{
	ADMUX |= (1<<REFS0);
 314:	ec e7       	ldi	r30, 0x7C	; 124
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	80 64       	ori	r24, 0x40	; 64
 31c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //Enable the ADC in Free-Running mode with a fadc = 125 kHz
 31e:	ea e7       	ldi	r30, 0x7A	; 122
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	87 6a       	ori	r24, 0xA7	; 167
 326:	80 83       	st	Z, r24
 328:	08 95       	ret

0000032a <ADC_clear>:
}

void ADC_clear(void)
{
	ADMUX &= ~(1<<MUX3) & ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0); //Clear ADC MUX
 32a:	ec e7       	ldi	r30, 0x7C	; 124
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	80 7f       	andi	r24, 0xF0	; 240
 332:	80 83       	st	Z, r24
 334:	08 95       	ret

00000336 <init_all>:
}

void init_all(void)
{
	board_init();
 336:	e5 df       	rcall	.-54     	; 0x302 <board_init>
	ADC_clear();
 338:	f8 df       	rcall	.-16     	; 0x32a <ADC_clear>
	ADC_init();
 33a:	ec df       	rcall	.-40     	; 0x314 <ADC_init>
 33c:	b1 de       	rcall	.-670    	; 0xa0 <uart_init>
	uart_init();
 33e:	e4 ed       	ldi	r30, 0xD4	; 212
 340:	f1 e0       	ldi	r31, 0x01	; 1
	stdout = stdin = stderr = &uart_str;
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	95 83       	std	Z+5, r25	; 0x05
 348:	84 83       	std	Z+4, r24	; 0x04
 34a:	91 83       	std	Z+1, r25	; 0x01
 34c:	80 83       	st	Z, r24
 34e:	93 83       	std	Z+3, r25	; 0x03
 350:	82 83       	std	Z+2, r24	; 0x02
 352:	86 e1       	ldi	r24, 0x16	; 22
	printf("Hello! \n\n");
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	db c0       	rjmp	.+438    	; 0x50e <puts>
 358:	08 95       	ret

0000035a <ADC_conv>:
 35a:	ea e7       	ldi	r30, 0x7A	; 122
 35c:	f0 e0       	ldi	r31, 0x00	; 0
}

int ADC_conv(void)
{
	ADCSRA |= (1<<ADSC);									//start conversion
 35e:	80 81       	ld	r24, Z
 360:	80 64       	ori	r24, 0x40	; 64
 362:	80 83       	st	Z, r24
	while(!(ADCSRA &(1<<ADSC)));							//wait for it to complete
 364:	80 81       	ld	r24, Z
 366:	86 ff       	sbrs	r24, 6
 368:	fd cf       	rjmp	.-6      	; 0x364 <ADC_conv+0xa>
	uint16_t sample_val_int = ADC;							//store the sample in a variable
 36a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 36e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	//float sample_val_f = (float) sample_val_int;			//convert to float
	//sample_val_f = (float)4095.0(sample_val_f/1023.0);		//calculate voltage in mV
	return sample_val_int;								//return as an int
}
 372:	08 95       	ret

00000374 <sensor_and_motor_select>:

void sensor_and_motor_select(int sens_mot_sel)
{
	switch(sens_mot_sel)
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	91 05       	cpc	r25, r1
 378:	11 f1       	breq	.+68     	; 0x3be <sensor_and_motor_select+0x4a>
 37a:	82 30       	cpi	r24, 0x02	; 2
 37c:	91 05       	cpc	r25, r1
 37e:	09 f4       	brne	.+2      	; 0x382 <sensor_and_motor_select+0xe>
 380:	39 c0       	rjmp	.+114    	; 0x3f4 <sensor_and_motor_select+0x80>
 382:	00 97       	sbiw	r24, 0x00	; 0
 384:	09 f0       	breq	.+2      	; 0x388 <sensor_and_motor_select+0x14>
 386:	51 c0       	rjmp	.+162    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
		case LEFT_SENSOR:
		ADC_clear();
 388:	d0 df       	rcall	.-96     	; 0x32a <ADC_clear>
		ADMUX |= (1<<MUX1);
 38a:	ec e7       	ldi	r30, 0x7C	; 124
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	82 60       	ori	r24, 0x02	; 2
		left_sensor = ADC_conv();
 392:	80 83       	st	Z, r24
 394:	e2 df       	rcall	.-60     	; 0x35a <ADC_conv>
 396:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <left_sensor+0x1>
 39a:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <left_sensor>
		printf("Left sensor: %d \n", left_sensor);
 39e:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <left_sensor>
 3a2:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <left_sensor+0x1>
 3a6:	9f 93       	push	r25
 3a8:	8f 93       	push	r24
 3aa:	8f e1       	ldi	r24, 0x1F	; 31
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	9f 93       	push	r25
 3b0:	8f 93       	push	r24
 3b2:	95 d0       	rcall	.+298    	; 0x4de <printf>
		break;
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
		
		case CENTER_SENSOR:
		ADC_clear();
 3bc:	08 95       	ret
 3be:	b5 df       	rcall	.-150    	; 0x32a <ADC_clear>
		ADMUX |= (1<<MUX1) | (1<<MUX0);
 3c0:	ec e7       	ldi	r30, 0x7C	; 124
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	83 60       	ori	r24, 0x03	; 3
		center_sensor = ADC_conv();
 3c8:	80 83       	st	Z, r24
 3ca:	c7 df       	rcall	.-114    	; 0x35a <ADC_conv>
 3cc:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <center_sensor+0x1>
 3d0:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <center_sensor>
		printf("Center sensor: %d \n", center_sensor);
 3d4:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <center_sensor>
 3d8:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <center_sensor+0x1>
 3dc:	9f 93       	push	r25
 3de:	8f 93       	push	r24
 3e0:	81 e3       	ldi	r24, 0x31	; 49
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	9f 93       	push	r25
 3e6:	8f 93       	push	r24
 3e8:	7a d0       	rcall	.+244    	; 0x4de <printf>
		break;
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	08 95       	ret
		
		case RIGHT_SENSOR:
		ADC_clear();
 3f4:	9a df       	rcall	.-204    	; 0x32a <ADC_clear>
		ADMUX |= (1<<MUX2) | (1<<MUX1);
 3f6:	ec e7       	ldi	r30, 0x7C	; 124
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	86 60       	ori	r24, 0x06	; 6
 3fe:	80 83       	st	Z, r24
		right_sensor = ADC_conv();
 400:	ac df       	rcall	.-168    	; 0x35a <ADC_conv>
 402:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <right_sensor+0x1>
 406:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <right_sensor>
 40a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <right_sensor>
		printf("Right sensor: %d \n", right_sensor);
 40e:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <right_sensor+0x1>
 412:	9f 93       	push	r25
 414:	8f 93       	push	r24
 416:	85 e4       	ldi	r24, 0x45	; 69
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	9f 93       	push	r25
 41c:	8f 93       	push	r24
 41e:	5f d0       	rcall	.+190    	; 0x4de <printf>
 420:	0f 90       	pop	r0
		break;
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	08 95       	ret
		
		default:
		printf("ERROR: State ID %d not recognized \n", sens_mot_sel);
 42a:	9f 93       	push	r25
 42c:	8f 93       	push	r24
 42e:	88 e5       	ldi	r24, 0x58	; 88
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	9f 93       	push	r25
 434:	8f 93       	push	r24
 436:	53 d0       	rcall	.+166    	; 0x4de <printf>
 438:	0f 90       	pop	r0
		break;
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	08 95       	ret

00000442 <main>:
 442:	79 df       	rcall	.-270    	; 0x336 <init_all>
	
	int sens_mot_sel = 0;
	
	while(1)
	{
		sensor_and_motor_select(sens_mot_sel);
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	95 df       	rcall	.-214    	; 0x374 <sensor_and_motor_select>
		sens_mot_sel++;
 44a:	c1 e0       	ldi	r28, 0x01	; 1
 44c:	d0 e0       	ldi	r29, 0x00	; 0
 44e:	05 c0       	rjmp	.+10     	; 0x45a <main+0x18>
		
		if(sens_mot_sel > 2)
		{
			printf("\n");
 450:	8a e0       	ldi	r24, 0x0A	; 10
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	57 d0       	rcall	.+174    	; 0x504 <putchar>
			sens_mot_sel = 0;
 456:	c0 e0       	ldi	r28, 0x00	; 0
 458:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45a:	2f ef       	ldi	r18, 0xFF	; 255
 45c:	85 ea       	ldi	r24, 0xA5	; 165
 45e:	9e e0       	ldi	r25, 0x0E	; 14
 460:	21 50       	subi	r18, 0x01	; 1
 462:	80 40       	sbci	r24, 0x00	; 0
 464:	90 40       	sbci	r25, 0x00	; 0
 466:	e1 f7       	brne	.-8      	; 0x460 <main+0x1e>
 468:	00 c0       	rjmp	.+0      	; 0x46a <main+0x28>
	
	int sens_mot_sel = 0;
	
	while(1)
	{
		sensor_and_motor_select(sens_mot_sel);
 46a:	00 00       	nop
 46c:	ce 01       	movw	r24, r28
 46e:	82 df       	rcall	.-252    	; 0x374 <sensor_and_motor_select>
		sens_mot_sel++;
 470:	21 96       	adiw	r28, 0x01	; 1
		
		if(sens_mot_sel > 2)
 472:	c3 30       	cpi	r28, 0x03	; 3
 474:	d1 05       	cpc	r29, r1
 476:	8c f3       	brlt	.-30     	; 0x45a <main+0x18>
 478:	eb cf       	rjmp	.-42     	; 0x450 <main+0xe>

0000047a <fwrite>:
 47a:	a0 e0       	ldi	r26, 0x00	; 0
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	e2 e4       	ldi	r30, 0x42	; 66
 480:	f2 e0       	ldi	r31, 0x02	; 2
 482:	fd c2       	rjmp	.+1530   	; 0xa7e <__prologue_saves__+0xc>
 484:	5b 01       	movw	r10, r22
 486:	4a 01       	movw	r8, r20
 488:	79 01       	movw	r14, r18
 48a:	d9 01       	movw	r26, r18
 48c:	13 96       	adiw	r26, 0x03	; 3
 48e:	2c 91       	ld	r18, X
 490:	21 ff       	sbrs	r18, 1
 492:	1d c0       	rjmp	.+58     	; 0x4ce <fwrite+0x54>
 494:	c0 e0       	ldi	r28, 0x00	; 0
 496:	d0 e0       	ldi	r29, 0x00	; 0
 498:	c8 15       	cp	r28, r8
 49a:	d9 05       	cpc	r29, r9
 49c:	d9 f0       	breq	.+54     	; 0x4d4 <fwrite+0x5a>
 49e:	8c 01       	movw	r16, r24
 4a0:	6c 01       	movw	r12, r24
 4a2:	ca 0c       	add	r12, r10
 4a4:	db 1c       	adc	r13, r11
 4a6:	c8 01       	movw	r24, r16
 4a8:	0c 15       	cp	r16, r12
 4aa:	1d 05       	cpc	r17, r13
 4ac:	71 f0       	breq	.+28     	; 0x4ca <fwrite+0x50>
 4ae:	0f 5f       	subi	r16, 0xFF	; 255
 4b0:	1f 4f       	sbci	r17, 0xFF	; 255
 4b2:	d7 01       	movw	r26, r14
 4b4:	18 96       	adiw	r26, 0x08	; 8
 4b6:	ed 91       	ld	r30, X+
 4b8:	fc 91       	ld	r31, X
 4ba:	19 97       	sbiw	r26, 0x09	; 9
 4bc:	b7 01       	movw	r22, r14
 4be:	dc 01       	movw	r26, r24
 4c0:	8c 91       	ld	r24, X
 4c2:	09 95       	icall
 4c4:	89 2b       	or	r24, r25
 4c6:	79 f3       	breq	.-34     	; 0x4a6 <fwrite+0x2c>
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <fwrite+0x5a>
 4ca:	21 96       	adiw	r28, 0x01	; 1
 4cc:	e5 cf       	rjmp	.-54     	; 0x498 <fwrite+0x1e>
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <fwrite+0x5c>
 4d4:	ce 01       	movw	r24, r28
 4d6:	cd b7       	in	r28, 0x3d	; 61
 4d8:	de b7       	in	r29, 0x3e	; 62
 4da:	ec e0       	ldi	r30, 0x0C	; 12
 4dc:	ec c2       	rjmp	.+1496   	; 0xab6 <__epilogue_restores__+0xc>

000004de <printf>:
 4de:	a0 e0       	ldi	r26, 0x00	; 0
 4e0:	b0 e0       	ldi	r27, 0x00	; 0
 4e2:	e4 e7       	ldi	r30, 0x74	; 116
 4e4:	f2 e0       	ldi	r31, 0x02	; 2
 4e6:	d5 c2       	rjmp	.+1450   	; 0xa92 <__prologue_saves__+0x20>
 4e8:	ae 01       	movw	r20, r28
 4ea:	4b 5f       	subi	r20, 0xFB	; 251
 4ec:	5f 4f       	sbci	r21, 0xFF	; 255
 4ee:	fa 01       	movw	r30, r20
 4f0:	61 91       	ld	r22, Z+
 4f2:	71 91       	ld	r23, Z+
 4f4:	af 01       	movw	r20, r30
 4f6:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__iob+0x2>
 4fa:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <__iob+0x3>
 4fe:	37 d0       	rcall	.+110    	; 0x56e <vfprintf>
 500:	e2 e0       	ldi	r30, 0x02	; 2
 502:	e3 c2       	rjmp	.+1478   	; 0xaca <__epilogue_restores__+0x20>

00000504 <putchar>:
 504:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <__iob+0x2>
 508:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <__iob+0x3>
 50c:	18 c2       	rjmp	.+1072   	; 0x93e <fputc>

0000050e <puts>:
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <__iob+0x2>
 51a:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <__iob+0x3>
 51e:	23 81       	ldd	r18, Z+3	; 0x03
 520:	21 ff       	sbrs	r18, 1
 522:	1b c0       	rjmp	.+54     	; 0x55a <puts+0x4c>
 524:	8c 01       	movw	r16, r24
 526:	d0 e0       	ldi	r29, 0x00	; 0
 528:	c0 e0       	ldi	r28, 0x00	; 0
 52a:	f8 01       	movw	r30, r16
 52c:	81 91       	ld	r24, Z+
 52e:	8f 01       	movw	r16, r30
 530:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <__iob+0x2>
 534:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <__iob+0x3>
 538:	db 01       	movw	r26, r22
 53a:	18 96       	adiw	r26, 0x08	; 8
 53c:	ed 91       	ld	r30, X+
 53e:	fc 91       	ld	r31, X
 540:	19 97       	sbiw	r26, 0x09	; 9
 542:	88 23       	and	r24, r24
 544:	31 f0       	breq	.+12     	; 0x552 <puts+0x44>
 546:	09 95       	icall
 548:	89 2b       	or	r24, r25
 54a:	79 f3       	breq	.-34     	; 0x52a <puts+0x1c>
 54c:	df ef       	ldi	r29, 0xFF	; 255
 54e:	cf ef       	ldi	r28, 0xFF	; 255
 550:	ec cf       	rjmp	.-40     	; 0x52a <puts+0x1c>
 552:	8a e0       	ldi	r24, 0x0A	; 10
 554:	09 95       	icall
 556:	89 2b       	or	r24, r25
 558:	19 f0       	breq	.+6      	; 0x560 <puts+0x52>
 55a:	8f ef       	ldi	r24, 0xFF	; 255
 55c:	9f ef       	ldi	r25, 0xFF	; 255
 55e:	02 c0       	rjmp	.+4      	; 0x564 <puts+0x56>
 560:	8d 2f       	mov	r24, r29
 562:	9c 2f       	mov	r25, r28
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	08 95       	ret

0000056e <vfprintf>:
 56e:	ab e0       	ldi	r26, 0x0B	; 11
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	ec eb       	ldi	r30, 0xBC	; 188
 574:	f2 e0       	ldi	r31, 0x02	; 2
 576:	7d c2       	rjmp	.+1274   	; 0xa72 <__prologue_saves__>
 578:	6c 01       	movw	r12, r24
 57a:	7b 01       	movw	r14, r22
 57c:	8a 01       	movw	r16, r20
 57e:	fc 01       	movw	r30, r24
 580:	17 82       	std	Z+7, r1	; 0x07
 582:	16 82       	std	Z+6, r1	; 0x06
 584:	83 81       	ldd	r24, Z+3	; 0x03
 586:	81 ff       	sbrs	r24, 1
 588:	bf c1       	rjmp	.+894    	; 0x908 <__stack+0x9>
 58a:	ce 01       	movw	r24, r28
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	3c 01       	movw	r6, r24
 590:	f6 01       	movw	r30, r12
 592:	93 81       	ldd	r25, Z+3	; 0x03
 594:	f7 01       	movw	r30, r14
 596:	93 fd       	sbrc	r25, 3
 598:	85 91       	lpm	r24, Z+
 59a:	93 ff       	sbrs	r25, 3
 59c:	81 91       	ld	r24, Z+
 59e:	7f 01       	movw	r14, r30
 5a0:	88 23       	and	r24, r24
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <vfprintf+0x38>
 5a4:	ad c1       	rjmp	.+858    	; 0x900 <__stack+0x1>
 5a6:	85 32       	cpi	r24, 0x25	; 37
 5a8:	39 f4       	brne	.+14     	; 0x5b8 <vfprintf+0x4a>
 5aa:	93 fd       	sbrc	r25, 3
 5ac:	85 91       	lpm	r24, Z+
 5ae:	93 ff       	sbrs	r25, 3
 5b0:	81 91       	ld	r24, Z+
 5b2:	7f 01       	movw	r14, r30
 5b4:	85 32       	cpi	r24, 0x25	; 37
 5b6:	21 f4       	brne	.+8      	; 0x5c0 <vfprintf+0x52>
 5b8:	b6 01       	movw	r22, r12
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	c0 d1       	rcall	.+896    	; 0x93e <fputc>
 5be:	e8 cf       	rjmp	.-48     	; 0x590 <vfprintf+0x22>
 5c0:	91 2c       	mov	r9, r1
 5c2:	21 2c       	mov	r2, r1
 5c4:	31 2c       	mov	r3, r1
 5c6:	ff e1       	ldi	r31, 0x1F	; 31
 5c8:	f3 15       	cp	r31, r3
 5ca:	d8 f0       	brcs	.+54     	; 0x602 <vfprintf+0x94>
 5cc:	8b 32       	cpi	r24, 0x2B	; 43
 5ce:	79 f0       	breq	.+30     	; 0x5ee <vfprintf+0x80>
 5d0:	38 f4       	brcc	.+14     	; 0x5e0 <vfprintf+0x72>
 5d2:	80 32       	cpi	r24, 0x20	; 32
 5d4:	79 f0       	breq	.+30     	; 0x5f4 <vfprintf+0x86>
 5d6:	83 32       	cpi	r24, 0x23	; 35
 5d8:	a1 f4       	brne	.+40     	; 0x602 <vfprintf+0x94>
 5da:	23 2d       	mov	r18, r3
 5dc:	20 61       	ori	r18, 0x10	; 16
 5de:	1d c0       	rjmp	.+58     	; 0x61a <vfprintf+0xac>
 5e0:	8d 32       	cpi	r24, 0x2D	; 45
 5e2:	61 f0       	breq	.+24     	; 0x5fc <vfprintf+0x8e>
 5e4:	80 33       	cpi	r24, 0x30	; 48
 5e6:	69 f4       	brne	.+26     	; 0x602 <vfprintf+0x94>
 5e8:	23 2d       	mov	r18, r3
 5ea:	21 60       	ori	r18, 0x01	; 1
 5ec:	16 c0       	rjmp	.+44     	; 0x61a <vfprintf+0xac>
 5ee:	83 2d       	mov	r24, r3
 5f0:	82 60       	ori	r24, 0x02	; 2
 5f2:	38 2e       	mov	r3, r24
 5f4:	e3 2d       	mov	r30, r3
 5f6:	e4 60       	ori	r30, 0x04	; 4
 5f8:	3e 2e       	mov	r3, r30
 5fa:	2a c0       	rjmp	.+84     	; 0x650 <vfprintf+0xe2>
 5fc:	f3 2d       	mov	r31, r3
 5fe:	f8 60       	ori	r31, 0x08	; 8
 600:	1d c0       	rjmp	.+58     	; 0x63c <vfprintf+0xce>
 602:	37 fc       	sbrc	r3, 7
 604:	2d c0       	rjmp	.+90     	; 0x660 <vfprintf+0xf2>
 606:	20 ed       	ldi	r18, 0xD0	; 208
 608:	28 0f       	add	r18, r24
 60a:	2a 30       	cpi	r18, 0x0A	; 10
 60c:	40 f0       	brcs	.+16     	; 0x61e <vfprintf+0xb0>
 60e:	8e 32       	cpi	r24, 0x2E	; 46
 610:	b9 f4       	brne	.+46     	; 0x640 <vfprintf+0xd2>
 612:	36 fc       	sbrc	r3, 6
 614:	75 c1       	rjmp	.+746    	; 0x900 <__stack+0x1>
 616:	23 2d       	mov	r18, r3
 618:	20 64       	ori	r18, 0x40	; 64
 61a:	32 2e       	mov	r3, r18
 61c:	19 c0       	rjmp	.+50     	; 0x650 <vfprintf+0xe2>
 61e:	36 fe       	sbrs	r3, 6
 620:	06 c0       	rjmp	.+12     	; 0x62e <vfprintf+0xc0>
 622:	8a e0       	ldi	r24, 0x0A	; 10
 624:	98 9e       	mul	r9, r24
 626:	20 0d       	add	r18, r0
 628:	11 24       	eor	r1, r1
 62a:	92 2e       	mov	r9, r18
 62c:	11 c0       	rjmp	.+34     	; 0x650 <vfprintf+0xe2>
 62e:	ea e0       	ldi	r30, 0x0A	; 10
 630:	2e 9e       	mul	r2, r30
 632:	20 0d       	add	r18, r0
 634:	11 24       	eor	r1, r1
 636:	22 2e       	mov	r2, r18
 638:	f3 2d       	mov	r31, r3
 63a:	f0 62       	ori	r31, 0x20	; 32
 63c:	3f 2e       	mov	r3, r31
 63e:	08 c0       	rjmp	.+16     	; 0x650 <vfprintf+0xe2>
 640:	8c 36       	cpi	r24, 0x6C	; 108
 642:	21 f4       	brne	.+8      	; 0x64c <vfprintf+0xde>
 644:	83 2d       	mov	r24, r3
 646:	80 68       	ori	r24, 0x80	; 128
 648:	38 2e       	mov	r3, r24
 64a:	02 c0       	rjmp	.+4      	; 0x650 <vfprintf+0xe2>
 64c:	88 36       	cpi	r24, 0x68	; 104
 64e:	41 f4       	brne	.+16     	; 0x660 <vfprintf+0xf2>
 650:	f7 01       	movw	r30, r14
 652:	93 fd       	sbrc	r25, 3
 654:	85 91       	lpm	r24, Z+
 656:	93 ff       	sbrs	r25, 3
 658:	81 91       	ld	r24, Z+
 65a:	7f 01       	movw	r14, r30
 65c:	81 11       	cpse	r24, r1
 65e:	b3 cf       	rjmp	.-154    	; 0x5c6 <vfprintf+0x58>
 660:	98 2f       	mov	r25, r24
 662:	9f 7d       	andi	r25, 0xDF	; 223
 664:	95 54       	subi	r25, 0x45	; 69
 666:	93 30       	cpi	r25, 0x03	; 3
 668:	28 f4       	brcc	.+10     	; 0x674 <vfprintf+0x106>
 66a:	0c 5f       	subi	r16, 0xFC	; 252
 66c:	1f 4f       	sbci	r17, 0xFF	; 255
 66e:	9f e3       	ldi	r25, 0x3F	; 63
 670:	99 83       	std	Y+1, r25	; 0x01
 672:	0d c0       	rjmp	.+26     	; 0x68e <vfprintf+0x120>
 674:	83 36       	cpi	r24, 0x63	; 99
 676:	31 f0       	breq	.+12     	; 0x684 <vfprintf+0x116>
 678:	83 37       	cpi	r24, 0x73	; 115
 67a:	71 f0       	breq	.+28     	; 0x698 <vfprintf+0x12a>
 67c:	83 35       	cpi	r24, 0x53	; 83
 67e:	09 f0       	breq	.+2      	; 0x682 <vfprintf+0x114>
 680:	55 c0       	rjmp	.+170    	; 0x72c <vfprintf+0x1be>
 682:	20 c0       	rjmp	.+64     	; 0x6c4 <vfprintf+0x156>
 684:	f8 01       	movw	r30, r16
 686:	80 81       	ld	r24, Z
 688:	89 83       	std	Y+1, r24	; 0x01
 68a:	0e 5f       	subi	r16, 0xFE	; 254
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	88 24       	eor	r8, r8
 690:	83 94       	inc	r8
 692:	91 2c       	mov	r9, r1
 694:	53 01       	movw	r10, r6
 696:	12 c0       	rjmp	.+36     	; 0x6bc <vfprintf+0x14e>
 698:	28 01       	movw	r4, r16
 69a:	f2 e0       	ldi	r31, 0x02	; 2
 69c:	4f 0e       	add	r4, r31
 69e:	51 1c       	adc	r5, r1
 6a0:	f8 01       	movw	r30, r16
 6a2:	a0 80       	ld	r10, Z
 6a4:	b1 80       	ldd	r11, Z+1	; 0x01
 6a6:	36 fe       	sbrs	r3, 6
 6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <vfprintf+0x142>
 6aa:	69 2d       	mov	r22, r9
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <vfprintf+0x146>
 6b0:	6f ef       	ldi	r22, 0xFF	; 255
 6b2:	7f ef       	ldi	r23, 0xFF	; 255
 6b4:	c5 01       	movw	r24, r10
 6b6:	38 d1       	rcall	.+624    	; 0x928 <strnlen>
 6b8:	4c 01       	movw	r8, r24
 6ba:	82 01       	movw	r16, r4
 6bc:	f3 2d       	mov	r31, r3
 6be:	ff 77       	andi	r31, 0x7F	; 127
 6c0:	3f 2e       	mov	r3, r31
 6c2:	15 c0       	rjmp	.+42     	; 0x6ee <vfprintf+0x180>
 6c4:	28 01       	movw	r4, r16
 6c6:	22 e0       	ldi	r18, 0x02	; 2
 6c8:	42 0e       	add	r4, r18
 6ca:	51 1c       	adc	r5, r1
 6cc:	f8 01       	movw	r30, r16
 6ce:	a0 80       	ld	r10, Z
 6d0:	b1 80       	ldd	r11, Z+1	; 0x01
 6d2:	36 fe       	sbrs	r3, 6
 6d4:	03 c0       	rjmp	.+6      	; 0x6dc <vfprintf+0x16e>
 6d6:	69 2d       	mov	r22, r9
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <vfprintf+0x172>
 6dc:	6f ef       	ldi	r22, 0xFF	; 255
 6de:	7f ef       	ldi	r23, 0xFF	; 255
 6e0:	c5 01       	movw	r24, r10
 6e2:	17 d1       	rcall	.+558    	; 0x912 <strnlen_P>
 6e4:	4c 01       	movw	r8, r24
 6e6:	f3 2d       	mov	r31, r3
 6e8:	f0 68       	ori	r31, 0x80	; 128
 6ea:	3f 2e       	mov	r3, r31
 6ec:	82 01       	movw	r16, r4
 6ee:	33 fc       	sbrc	r3, 3
 6f0:	19 c0       	rjmp	.+50     	; 0x724 <vfprintf+0x1b6>
 6f2:	82 2d       	mov	r24, r2
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	88 16       	cp	r8, r24
 6f8:	99 06       	cpc	r9, r25
 6fa:	a0 f4       	brcc	.+40     	; 0x724 <vfprintf+0x1b6>
 6fc:	b6 01       	movw	r22, r12
 6fe:	80 e2       	ldi	r24, 0x20	; 32
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	1d d1       	rcall	.+570    	; 0x93e <fputc>
 704:	2a 94       	dec	r2
 706:	f5 cf       	rjmp	.-22     	; 0x6f2 <vfprintf+0x184>
 708:	f5 01       	movw	r30, r10
 70a:	37 fc       	sbrc	r3, 7
 70c:	85 91       	lpm	r24, Z+
 70e:	37 fe       	sbrs	r3, 7
 710:	81 91       	ld	r24, Z+
 712:	5f 01       	movw	r10, r30
 714:	b6 01       	movw	r22, r12
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	12 d1       	rcall	.+548    	; 0x93e <fputc>
 71a:	21 10       	cpse	r2, r1
 71c:	2a 94       	dec	r2
 71e:	21 e0       	ldi	r18, 0x01	; 1
 720:	82 1a       	sub	r8, r18
 722:	91 08       	sbc	r9, r1
 724:	81 14       	cp	r8, r1
 726:	91 04       	cpc	r9, r1
 728:	79 f7       	brne	.-34     	; 0x708 <vfprintf+0x19a>
 72a:	e1 c0       	rjmp	.+450    	; 0x8ee <vfprintf+0x380>
 72c:	84 36       	cpi	r24, 0x64	; 100
 72e:	11 f0       	breq	.+4      	; 0x734 <vfprintf+0x1c6>
 730:	89 36       	cpi	r24, 0x69	; 105
 732:	39 f5       	brne	.+78     	; 0x782 <vfprintf+0x214>
 734:	f8 01       	movw	r30, r16
 736:	37 fe       	sbrs	r3, 7
 738:	07 c0       	rjmp	.+14     	; 0x748 <vfprintf+0x1da>
 73a:	60 81       	ld	r22, Z
 73c:	71 81       	ldd	r23, Z+1	; 0x01
 73e:	82 81       	ldd	r24, Z+2	; 0x02
 740:	93 81       	ldd	r25, Z+3	; 0x03
 742:	0c 5f       	subi	r16, 0xFC	; 252
 744:	1f 4f       	sbci	r17, 0xFF	; 255
 746:	08 c0       	rjmp	.+16     	; 0x758 <vfprintf+0x1ea>
 748:	60 81       	ld	r22, Z
 74a:	71 81       	ldd	r23, Z+1	; 0x01
 74c:	07 2e       	mov	r0, r23
 74e:	00 0c       	add	r0, r0
 750:	88 0b       	sbc	r24, r24
 752:	99 0b       	sbc	r25, r25
 754:	0e 5f       	subi	r16, 0xFE	; 254
 756:	1f 4f       	sbci	r17, 0xFF	; 255
 758:	f3 2d       	mov	r31, r3
 75a:	ff 76       	andi	r31, 0x6F	; 111
 75c:	3f 2e       	mov	r3, r31
 75e:	97 ff       	sbrs	r25, 7
 760:	09 c0       	rjmp	.+18     	; 0x774 <vfprintf+0x206>
 762:	90 95       	com	r25
 764:	80 95       	com	r24
 766:	70 95       	com	r23
 768:	61 95       	neg	r22
 76a:	7f 4f       	sbci	r23, 0xFF	; 255
 76c:	8f 4f       	sbci	r24, 0xFF	; 255
 76e:	9f 4f       	sbci	r25, 0xFF	; 255
 770:	f0 68       	ori	r31, 0x80	; 128
 772:	3f 2e       	mov	r3, r31
 774:	2a e0       	ldi	r18, 0x0A	; 10
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	a3 01       	movw	r20, r6
 77a:	1d d1       	rcall	.+570    	; 0x9b6 <__ultoa_invert>
 77c:	88 2e       	mov	r8, r24
 77e:	86 18       	sub	r8, r6
 780:	44 c0       	rjmp	.+136    	; 0x80a <vfprintf+0x29c>
 782:	85 37       	cpi	r24, 0x75	; 117
 784:	31 f4       	brne	.+12     	; 0x792 <vfprintf+0x224>
 786:	23 2d       	mov	r18, r3
 788:	2f 7e       	andi	r18, 0xEF	; 239
 78a:	b2 2e       	mov	r11, r18
 78c:	2a e0       	ldi	r18, 0x0A	; 10
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	25 c0       	rjmp	.+74     	; 0x7dc <vfprintf+0x26e>
 792:	93 2d       	mov	r25, r3
 794:	99 7f       	andi	r25, 0xF9	; 249
 796:	b9 2e       	mov	r11, r25
 798:	8f 36       	cpi	r24, 0x6F	; 111
 79a:	c1 f0       	breq	.+48     	; 0x7cc <vfprintf+0x25e>
 79c:	18 f4       	brcc	.+6      	; 0x7a4 <vfprintf+0x236>
 79e:	88 35       	cpi	r24, 0x58	; 88
 7a0:	79 f0       	breq	.+30     	; 0x7c0 <vfprintf+0x252>
 7a2:	ae c0       	rjmp	.+348    	; 0x900 <__stack+0x1>
 7a4:	80 37       	cpi	r24, 0x70	; 112
 7a6:	19 f0       	breq	.+6      	; 0x7ae <vfprintf+0x240>
 7a8:	88 37       	cpi	r24, 0x78	; 120
 7aa:	21 f0       	breq	.+8      	; 0x7b4 <vfprintf+0x246>
 7ac:	a9 c0       	rjmp	.+338    	; 0x900 <__stack+0x1>
 7ae:	e9 2f       	mov	r30, r25
 7b0:	e0 61       	ori	r30, 0x10	; 16
 7b2:	be 2e       	mov	r11, r30
 7b4:	b4 fe       	sbrs	r11, 4
 7b6:	0d c0       	rjmp	.+26     	; 0x7d2 <vfprintf+0x264>
 7b8:	fb 2d       	mov	r31, r11
 7ba:	f4 60       	ori	r31, 0x04	; 4
 7bc:	bf 2e       	mov	r11, r31
 7be:	09 c0       	rjmp	.+18     	; 0x7d2 <vfprintf+0x264>
 7c0:	34 fe       	sbrs	r3, 4
 7c2:	0a c0       	rjmp	.+20     	; 0x7d8 <vfprintf+0x26a>
 7c4:	29 2f       	mov	r18, r25
 7c6:	26 60       	ori	r18, 0x06	; 6
 7c8:	b2 2e       	mov	r11, r18
 7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <vfprintf+0x26a>
 7cc:	28 e0       	ldi	r18, 0x08	; 8
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	05 c0       	rjmp	.+10     	; 0x7dc <vfprintf+0x26e>
 7d2:	20 e1       	ldi	r18, 0x10	; 16
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <vfprintf+0x26e>
 7d8:	20 e1       	ldi	r18, 0x10	; 16
 7da:	32 e0       	ldi	r19, 0x02	; 2
 7dc:	f8 01       	movw	r30, r16
 7de:	b7 fe       	sbrs	r11, 7
 7e0:	07 c0       	rjmp	.+14     	; 0x7f0 <vfprintf+0x282>
 7e2:	60 81       	ld	r22, Z
 7e4:	71 81       	ldd	r23, Z+1	; 0x01
 7e6:	82 81       	ldd	r24, Z+2	; 0x02
 7e8:	93 81       	ldd	r25, Z+3	; 0x03
 7ea:	0c 5f       	subi	r16, 0xFC	; 252
 7ec:	1f 4f       	sbci	r17, 0xFF	; 255
 7ee:	06 c0       	rjmp	.+12     	; 0x7fc <vfprintf+0x28e>
 7f0:	60 81       	ld	r22, Z
 7f2:	71 81       	ldd	r23, Z+1	; 0x01
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 5f       	subi	r16, 0xFE	; 254
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
 7fc:	a3 01       	movw	r20, r6
 7fe:	db d0       	rcall	.+438    	; 0x9b6 <__ultoa_invert>
 800:	88 2e       	mov	r8, r24
 802:	86 18       	sub	r8, r6
 804:	fb 2d       	mov	r31, r11
 806:	ff 77       	andi	r31, 0x7F	; 127
 808:	3f 2e       	mov	r3, r31
 80a:	36 fe       	sbrs	r3, 6
 80c:	0d c0       	rjmp	.+26     	; 0x828 <vfprintf+0x2ba>
 80e:	23 2d       	mov	r18, r3
 810:	2e 7f       	andi	r18, 0xFE	; 254
 812:	a2 2e       	mov	r10, r18
 814:	89 14       	cp	r8, r9
 816:	58 f4       	brcc	.+22     	; 0x82e <vfprintf+0x2c0>
 818:	34 fe       	sbrs	r3, 4
 81a:	0b c0       	rjmp	.+22     	; 0x832 <vfprintf+0x2c4>
 81c:	32 fc       	sbrc	r3, 2
 81e:	09 c0       	rjmp	.+18     	; 0x832 <vfprintf+0x2c4>
 820:	83 2d       	mov	r24, r3
 822:	8e 7e       	andi	r24, 0xEE	; 238
 824:	a8 2e       	mov	r10, r24
 826:	05 c0       	rjmp	.+10     	; 0x832 <vfprintf+0x2c4>
 828:	b8 2c       	mov	r11, r8
 82a:	a3 2c       	mov	r10, r3
 82c:	03 c0       	rjmp	.+6      	; 0x834 <vfprintf+0x2c6>
 82e:	b8 2c       	mov	r11, r8
 830:	01 c0       	rjmp	.+2      	; 0x834 <vfprintf+0x2c6>
 832:	b9 2c       	mov	r11, r9
 834:	a4 fe       	sbrs	r10, 4
 836:	0f c0       	rjmp	.+30     	; 0x856 <vfprintf+0x2e8>
 838:	fe 01       	movw	r30, r28
 83a:	e8 0d       	add	r30, r8
 83c:	f1 1d       	adc	r31, r1
 83e:	80 81       	ld	r24, Z
 840:	80 33       	cpi	r24, 0x30	; 48
 842:	21 f4       	brne	.+8      	; 0x84c <vfprintf+0x2de>
 844:	9a 2d       	mov	r25, r10
 846:	99 7e       	andi	r25, 0xE9	; 233
 848:	a9 2e       	mov	r10, r25
 84a:	09 c0       	rjmp	.+18     	; 0x85e <vfprintf+0x2f0>
 84c:	a2 fe       	sbrs	r10, 2
 84e:	06 c0       	rjmp	.+12     	; 0x85c <vfprintf+0x2ee>
 850:	b3 94       	inc	r11
 852:	b3 94       	inc	r11
 854:	04 c0       	rjmp	.+8      	; 0x85e <vfprintf+0x2f0>
 856:	8a 2d       	mov	r24, r10
 858:	86 78       	andi	r24, 0x86	; 134
 85a:	09 f0       	breq	.+2      	; 0x85e <vfprintf+0x2f0>
 85c:	b3 94       	inc	r11
 85e:	a3 fc       	sbrc	r10, 3
 860:	10 c0       	rjmp	.+32     	; 0x882 <vfprintf+0x314>
 862:	a0 fe       	sbrs	r10, 0
 864:	06 c0       	rjmp	.+12     	; 0x872 <vfprintf+0x304>
 866:	b2 14       	cp	r11, r2
 868:	80 f4       	brcc	.+32     	; 0x88a <vfprintf+0x31c>
 86a:	28 0c       	add	r2, r8
 86c:	92 2c       	mov	r9, r2
 86e:	9b 18       	sub	r9, r11
 870:	0d c0       	rjmp	.+26     	; 0x88c <vfprintf+0x31e>
 872:	b2 14       	cp	r11, r2
 874:	58 f4       	brcc	.+22     	; 0x88c <vfprintf+0x31e>
 876:	b6 01       	movw	r22, r12
 878:	80 e2       	ldi	r24, 0x20	; 32
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	60 d0       	rcall	.+192    	; 0x93e <fputc>
 87e:	b3 94       	inc	r11
 880:	f8 cf       	rjmp	.-16     	; 0x872 <vfprintf+0x304>
 882:	b2 14       	cp	r11, r2
 884:	18 f4       	brcc	.+6      	; 0x88c <vfprintf+0x31e>
 886:	2b 18       	sub	r2, r11
 888:	02 c0       	rjmp	.+4      	; 0x88e <vfprintf+0x320>
 88a:	98 2c       	mov	r9, r8
 88c:	21 2c       	mov	r2, r1
 88e:	a4 fe       	sbrs	r10, 4
 890:	0f c0       	rjmp	.+30     	; 0x8b0 <vfprintf+0x342>
 892:	b6 01       	movw	r22, r12
 894:	80 e3       	ldi	r24, 0x30	; 48
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	52 d0       	rcall	.+164    	; 0x93e <fputc>
 89a:	a2 fe       	sbrs	r10, 2
 89c:	16 c0       	rjmp	.+44     	; 0x8ca <vfprintf+0x35c>
 89e:	a1 fc       	sbrc	r10, 1
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <vfprintf+0x33a>
 8a2:	88 e7       	ldi	r24, 0x78	; 120
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <vfprintf+0x33e>
 8a8:	88 e5       	ldi	r24, 0x58	; 88
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	b6 01       	movw	r22, r12
 8ae:	0c c0       	rjmp	.+24     	; 0x8c8 <vfprintf+0x35a>
 8b0:	8a 2d       	mov	r24, r10
 8b2:	86 78       	andi	r24, 0x86	; 134
 8b4:	51 f0       	breq	.+20     	; 0x8ca <vfprintf+0x35c>
 8b6:	a1 fe       	sbrs	r10, 1
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <vfprintf+0x350>
 8ba:	8b e2       	ldi	r24, 0x2B	; 43
 8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <vfprintf+0x352>
 8be:	80 e2       	ldi	r24, 0x20	; 32
 8c0:	a7 fc       	sbrc	r10, 7
 8c2:	8d e2       	ldi	r24, 0x2D	; 45
 8c4:	b6 01       	movw	r22, r12
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	3a d0       	rcall	.+116    	; 0x93e <fputc>
 8ca:	89 14       	cp	r8, r9
 8cc:	30 f4       	brcc	.+12     	; 0x8da <vfprintf+0x36c>
 8ce:	b6 01       	movw	r22, r12
 8d0:	80 e3       	ldi	r24, 0x30	; 48
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	34 d0       	rcall	.+104    	; 0x93e <fputc>
 8d6:	9a 94       	dec	r9
 8d8:	f8 cf       	rjmp	.-16     	; 0x8ca <vfprintf+0x35c>
 8da:	8a 94       	dec	r8
 8dc:	f3 01       	movw	r30, r6
 8de:	e8 0d       	add	r30, r8
 8e0:	f1 1d       	adc	r31, r1
 8e2:	80 81       	ld	r24, Z
 8e4:	b6 01       	movw	r22, r12
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	2a d0       	rcall	.+84     	; 0x93e <fputc>
 8ea:	81 10       	cpse	r8, r1
 8ec:	f6 cf       	rjmp	.-20     	; 0x8da <vfprintf+0x36c>
 8ee:	22 20       	and	r2, r2
 8f0:	09 f4       	brne	.+2      	; 0x8f4 <vfprintf+0x386>
 8f2:	4e ce       	rjmp	.-868    	; 0x590 <vfprintf+0x22>
 8f4:	b6 01       	movw	r22, r12
 8f6:	80 e2       	ldi	r24, 0x20	; 32
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	21 d0       	rcall	.+66     	; 0x93e <fputc>
 8fc:	2a 94       	dec	r2
 8fe:	f7 cf       	rjmp	.-18     	; 0x8ee <vfprintf+0x380>
 900:	f6 01       	movw	r30, r12
 902:	86 81       	ldd	r24, Z+6	; 0x06
 904:	97 81       	ldd	r25, Z+7	; 0x07
 906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xd>
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	9f ef       	ldi	r25, 0xFF	; 255
 90c:	2b 96       	adiw	r28, 0x0b	; 11
 90e:	e2 e1       	ldi	r30, 0x12	; 18
 910:	cc c0       	rjmp	.+408    	; 0xaaa <__epilogue_restores__>

00000912 <strnlen_P>:
 912:	fc 01       	movw	r30, r24
 914:	05 90       	lpm	r0, Z+
 916:	61 50       	subi	r22, 0x01	; 1
 918:	70 40       	sbci	r23, 0x00	; 0
 91a:	01 10       	cpse	r0, r1
 91c:	d8 f7       	brcc	.-10     	; 0x914 <strnlen_P+0x2>
 91e:	80 95       	com	r24
 920:	90 95       	com	r25
 922:	8e 0f       	add	r24, r30
 924:	9f 1f       	adc	r25, r31
 926:	08 95       	ret

00000928 <strnlen>:
 928:	fc 01       	movw	r30, r24
 92a:	61 50       	subi	r22, 0x01	; 1
 92c:	70 40       	sbci	r23, 0x00	; 0
 92e:	01 90       	ld	r0, Z+
 930:	01 10       	cpse	r0, r1
 932:	d8 f7       	brcc	.-10     	; 0x92a <strnlen+0x2>
 934:	80 95       	com	r24
 936:	90 95       	com	r25
 938:	8e 0f       	add	r24, r30
 93a:	9f 1f       	adc	r25, r31
 93c:	08 95       	ret

0000093e <fputc>:
 93e:	0f 93       	push	r16
 940:	1f 93       	push	r17
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
 946:	fb 01       	movw	r30, r22
 948:	23 81       	ldd	r18, Z+3	; 0x03
 94a:	21 fd       	sbrc	r18, 1
 94c:	03 c0       	rjmp	.+6      	; 0x954 <fputc+0x16>
 94e:	8f ef       	ldi	r24, 0xFF	; 255
 950:	9f ef       	ldi	r25, 0xFF	; 255
 952:	2c c0       	rjmp	.+88     	; 0x9ac <fputc+0x6e>
 954:	22 ff       	sbrs	r18, 2
 956:	16 c0       	rjmp	.+44     	; 0x984 <fputc+0x46>
 958:	46 81       	ldd	r20, Z+6	; 0x06
 95a:	57 81       	ldd	r21, Z+7	; 0x07
 95c:	24 81       	ldd	r18, Z+4	; 0x04
 95e:	35 81       	ldd	r19, Z+5	; 0x05
 960:	42 17       	cp	r20, r18
 962:	53 07       	cpc	r21, r19
 964:	44 f4       	brge	.+16     	; 0x976 <fputc+0x38>
 966:	a0 81       	ld	r26, Z
 968:	b1 81       	ldd	r27, Z+1	; 0x01
 96a:	9d 01       	movw	r18, r26
 96c:	2f 5f       	subi	r18, 0xFF	; 255
 96e:	3f 4f       	sbci	r19, 0xFF	; 255
 970:	31 83       	std	Z+1, r19	; 0x01
 972:	20 83       	st	Z, r18
 974:	8c 93       	st	X, r24
 976:	26 81       	ldd	r18, Z+6	; 0x06
 978:	37 81       	ldd	r19, Z+7	; 0x07
 97a:	2f 5f       	subi	r18, 0xFF	; 255
 97c:	3f 4f       	sbci	r19, 0xFF	; 255
 97e:	37 83       	std	Z+7, r19	; 0x07
 980:	26 83       	std	Z+6, r18	; 0x06
 982:	14 c0       	rjmp	.+40     	; 0x9ac <fputc+0x6e>
 984:	8b 01       	movw	r16, r22
 986:	ec 01       	movw	r28, r24
 988:	fb 01       	movw	r30, r22
 98a:	00 84       	ldd	r0, Z+8	; 0x08
 98c:	f1 85       	ldd	r31, Z+9	; 0x09
 98e:	e0 2d       	mov	r30, r0
 990:	09 95       	icall
 992:	89 2b       	or	r24, r25
 994:	e1 f6       	brne	.-72     	; 0x94e <fputc+0x10>
 996:	d8 01       	movw	r26, r16
 998:	16 96       	adiw	r26, 0x06	; 6
 99a:	8d 91       	ld	r24, X+
 99c:	9c 91       	ld	r25, X
 99e:	17 97       	sbiw	r26, 0x07	; 7
 9a0:	01 96       	adiw	r24, 0x01	; 1
 9a2:	17 96       	adiw	r26, 0x07	; 7
 9a4:	9c 93       	st	X, r25
 9a6:	8e 93       	st	-X, r24
 9a8:	16 97       	sbiw	r26, 0x06	; 6
 9aa:	ce 01       	movw	r24, r28
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	1f 91       	pop	r17
 9b2:	0f 91       	pop	r16
 9b4:	08 95       	ret

000009b6 <__ultoa_invert>:
 9b6:	fa 01       	movw	r30, r20
 9b8:	aa 27       	eor	r26, r26
 9ba:	28 30       	cpi	r18, 0x08	; 8
 9bc:	51 f1       	breq	.+84     	; 0xa12 <__ultoa_invert+0x5c>
 9be:	20 31       	cpi	r18, 0x10	; 16
 9c0:	81 f1       	breq	.+96     	; 0xa22 <__ultoa_invert+0x6c>
 9c2:	e8 94       	clt
 9c4:	6f 93       	push	r22
 9c6:	6e 7f       	andi	r22, 0xFE	; 254
 9c8:	6e 5f       	subi	r22, 0xFE	; 254
 9ca:	7f 4f       	sbci	r23, 0xFF	; 255
 9cc:	8f 4f       	sbci	r24, 0xFF	; 255
 9ce:	9f 4f       	sbci	r25, 0xFF	; 255
 9d0:	af 4f       	sbci	r26, 0xFF	; 255
 9d2:	b1 e0       	ldi	r27, 0x01	; 1
 9d4:	3e d0       	rcall	.+124    	; 0xa52 <__ultoa_invert+0x9c>
 9d6:	b4 e0       	ldi	r27, 0x04	; 4
 9d8:	3c d0       	rcall	.+120    	; 0xa52 <__ultoa_invert+0x9c>
 9da:	67 0f       	add	r22, r23
 9dc:	78 1f       	adc	r23, r24
 9de:	89 1f       	adc	r24, r25
 9e0:	9a 1f       	adc	r25, r26
 9e2:	a1 1d       	adc	r26, r1
 9e4:	68 0f       	add	r22, r24
 9e6:	79 1f       	adc	r23, r25
 9e8:	8a 1f       	adc	r24, r26
 9ea:	91 1d       	adc	r25, r1
 9ec:	a1 1d       	adc	r26, r1
 9ee:	6a 0f       	add	r22, r26
 9f0:	71 1d       	adc	r23, r1
 9f2:	81 1d       	adc	r24, r1
 9f4:	91 1d       	adc	r25, r1
 9f6:	a1 1d       	adc	r26, r1
 9f8:	20 d0       	rcall	.+64     	; 0xa3a <__ultoa_invert+0x84>
 9fa:	09 f4       	brne	.+2      	; 0x9fe <__ultoa_invert+0x48>
 9fc:	68 94       	set
 9fe:	3f 91       	pop	r19
 a00:	2a e0       	ldi	r18, 0x0A	; 10
 a02:	26 9f       	mul	r18, r22
 a04:	11 24       	eor	r1, r1
 a06:	30 19       	sub	r19, r0
 a08:	30 5d       	subi	r19, 0xD0	; 208
 a0a:	31 93       	st	Z+, r19
 a0c:	de f6       	brtc	.-74     	; 0x9c4 <__ultoa_invert+0xe>
 a0e:	cf 01       	movw	r24, r30
 a10:	08 95       	ret
 a12:	46 2f       	mov	r20, r22
 a14:	47 70       	andi	r20, 0x07	; 7
 a16:	40 5d       	subi	r20, 0xD0	; 208
 a18:	41 93       	st	Z+, r20
 a1a:	b3 e0       	ldi	r27, 0x03	; 3
 a1c:	0f d0       	rcall	.+30     	; 0xa3c <__ultoa_invert+0x86>
 a1e:	c9 f7       	brne	.-14     	; 0xa12 <__ultoa_invert+0x5c>
 a20:	f6 cf       	rjmp	.-20     	; 0xa0e <__ultoa_invert+0x58>
 a22:	46 2f       	mov	r20, r22
 a24:	4f 70       	andi	r20, 0x0F	; 15
 a26:	40 5d       	subi	r20, 0xD0	; 208
 a28:	4a 33       	cpi	r20, 0x3A	; 58
 a2a:	18 f0       	brcs	.+6      	; 0xa32 <__ultoa_invert+0x7c>
 a2c:	49 5d       	subi	r20, 0xD9	; 217
 a2e:	31 fd       	sbrc	r19, 1
 a30:	40 52       	subi	r20, 0x20	; 32
 a32:	41 93       	st	Z+, r20
 a34:	02 d0       	rcall	.+4      	; 0xa3a <__ultoa_invert+0x84>
 a36:	a9 f7       	brne	.-22     	; 0xa22 <__ultoa_invert+0x6c>
 a38:	ea cf       	rjmp	.-44     	; 0xa0e <__ultoa_invert+0x58>
 a3a:	b4 e0       	ldi	r27, 0x04	; 4
 a3c:	a6 95       	lsr	r26
 a3e:	97 95       	ror	r25
 a40:	87 95       	ror	r24
 a42:	77 95       	ror	r23
 a44:	67 95       	ror	r22
 a46:	ba 95       	dec	r27
 a48:	c9 f7       	brne	.-14     	; 0xa3c <__ultoa_invert+0x86>
 a4a:	00 97       	sbiw	r24, 0x00	; 0
 a4c:	61 05       	cpc	r22, r1
 a4e:	71 05       	cpc	r23, r1
 a50:	08 95       	ret
 a52:	9b 01       	movw	r18, r22
 a54:	ac 01       	movw	r20, r24
 a56:	0a 2e       	mov	r0, r26
 a58:	06 94       	lsr	r0
 a5a:	57 95       	ror	r21
 a5c:	47 95       	ror	r20
 a5e:	37 95       	ror	r19
 a60:	27 95       	ror	r18
 a62:	ba 95       	dec	r27
 a64:	c9 f7       	brne	.-14     	; 0xa58 <__ultoa_invert+0xa2>
 a66:	62 0f       	add	r22, r18
 a68:	73 1f       	adc	r23, r19
 a6a:	84 1f       	adc	r24, r20
 a6c:	95 1f       	adc	r25, r21
 a6e:	a0 1d       	adc	r26, r0
 a70:	08 95       	ret

00000a72 <__prologue_saves__>:
 a72:	2f 92       	push	r2
 a74:	3f 92       	push	r3
 a76:	4f 92       	push	r4
 a78:	5f 92       	push	r5
 a7a:	6f 92       	push	r6
 a7c:	7f 92       	push	r7
 a7e:	8f 92       	push	r8
 a80:	9f 92       	push	r9
 a82:	af 92       	push	r10
 a84:	bf 92       	push	r11
 a86:	cf 92       	push	r12
 a88:	df 92       	push	r13
 a8a:	ef 92       	push	r14
 a8c:	ff 92       	push	r15
 a8e:	0f 93       	push	r16
 a90:	1f 93       	push	r17
 a92:	cf 93       	push	r28
 a94:	df 93       	push	r29
 a96:	cd b7       	in	r28, 0x3d	; 61
 a98:	de b7       	in	r29, 0x3e	; 62
 a9a:	ca 1b       	sub	r28, r26
 a9c:	db 0b       	sbc	r29, r27
 a9e:	0f b6       	in	r0, 0x3f	; 63
 aa0:	f8 94       	cli
 aa2:	de bf       	out	0x3e, r29	; 62
 aa4:	0f be       	out	0x3f, r0	; 63
 aa6:	cd bf       	out	0x3d, r28	; 61
 aa8:	09 94       	ijmp

00000aaa <__epilogue_restores__>:
 aaa:	2a 88       	ldd	r2, Y+18	; 0x12
 aac:	39 88       	ldd	r3, Y+17	; 0x11
 aae:	48 88       	ldd	r4, Y+16	; 0x10
 ab0:	5f 84       	ldd	r5, Y+15	; 0x0f
 ab2:	6e 84       	ldd	r6, Y+14	; 0x0e
 ab4:	7d 84       	ldd	r7, Y+13	; 0x0d
 ab6:	8c 84       	ldd	r8, Y+12	; 0x0c
 ab8:	9b 84       	ldd	r9, Y+11	; 0x0b
 aba:	aa 84       	ldd	r10, Y+10	; 0x0a
 abc:	b9 84       	ldd	r11, Y+9	; 0x09
 abe:	c8 84       	ldd	r12, Y+8	; 0x08
 ac0:	df 80       	ldd	r13, Y+7	; 0x07
 ac2:	ee 80       	ldd	r14, Y+6	; 0x06
 ac4:	fd 80       	ldd	r15, Y+5	; 0x05
 ac6:	0c 81       	ldd	r16, Y+4	; 0x04
 ac8:	1b 81       	ldd	r17, Y+3	; 0x03
 aca:	aa 81       	ldd	r26, Y+2	; 0x02
 acc:	b9 81       	ldd	r27, Y+1	; 0x01
 ace:	ce 0f       	add	r28, r30
 ad0:	d1 1d       	adc	r29, r1
 ad2:	0f b6       	in	r0, 0x3f	; 63
 ad4:	f8 94       	cli
 ad6:	de bf       	out	0x3e, r29	; 62
 ad8:	0f be       	out	0x3f, r0	; 63
 ada:	cd bf       	out	0x3d, r28	; 61
 adc:	ed 01       	movw	r28, r26
 ade:	08 95       	ret

00000ae0 <_exit>:
 ae0:	f8 94       	cli

00000ae2 <__stop_program>:
 ae2:	ff cf       	rjmp	.-2      	; 0xae2 <__stop_program>
